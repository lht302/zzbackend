[
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|Zzzzz_Imp>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|Zzzzz_Imp_1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|Zzzzz_Imp_2>io"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.InterruptBusWrapper"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_1",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_2",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_3",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_4",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_5",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_6",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_7",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_8",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_9",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_10",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_11",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_12",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_13",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_14",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_15",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_1"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_1"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator_1"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_1"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_1"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_16",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_17",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLXbar_1"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_18",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_19",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_20",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_21",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_22",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_23",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_24",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_25",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_26",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_27",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_28",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_29",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_30",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_31",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.PeripheryBus",
    "regMappingSer": {
      "displayName": "PeripheryBus",
      "deviceName": "PeripheryBus",
      "baseAddress": 4096,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "unnamedRegField0_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "unnamedRegField0_8",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "unnamedRegField0_16",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "unnamedRegField0_24",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "unnamedRegField0_32",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "unnamedRegField0_40",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "unnamedRegField0_48",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "unnamedRegField0_56",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLXbar_3"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_32",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_33",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_34",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_35",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.FrontBus"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator_3"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_3"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_3"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_36",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_37",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_38",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_39",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_40",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_41",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_42",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_43",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_44",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_45",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_46",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_47",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_48",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_49",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_50",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_51",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_52",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_53",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_54",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_55",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_7"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_3"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_10"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_56",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_57",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_58",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_59",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_60",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_61",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_4"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_5"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_6"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_62",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_63",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_18"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_64",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_65",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_66",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_67",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator_4"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_4"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_4"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_68",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_69",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_70",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_71",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_72",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_73",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_74",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_75",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_9"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLSourceShrinker"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_7"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLXbar_7"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_76",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_77",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_8"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_22"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_11"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroupAggregator_5"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_5"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.FixedClockBroadcast_5"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_5"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_78",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_79",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.InclusiveCacheControl",
    "regMappingSer": {
      "displayName": "InclusiveCacheControl",
      "deviceName": "InclusiveCacheControl",
      "baseAddress": 33619968,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "Banks",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Number of banks in the cache",
          "group": "Config",
          "groupDesc": "Information about the Cache Configuration",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "Ways",
          "resetValue": 8,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Number of ways per bank",
          "group": "Config",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "lgSets",
          "resetValue": 10,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Base-2 logarithm of the sets per bank",
          "group": "Config",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "lgBlockBytes",
          "resetValue": 6,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Base-2 logarithm of the bytes per cache block",
          "group": "Config",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x200",
          "bitOffset": 0,
          "bitWidth": 64,
          "name": "Flush64",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Flush the phsyical address equal to the 64-bit written data from the cache",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x240",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "Flush32",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Flush the physical address equal to the 32-bit written data << 4 from the cache",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_80",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_81",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.Directory.cc_dir",
    "address_width": 10,
    "name": "cc_dir",
    "data_width": 152,
    "depth": 1024,
    "description": "Directory RAM",
    "write_mask_granularity": 19
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.BankedStore.cc_banks_0",
    "address_width": 14,
    "name": "cc_banks_0",
    "data_width": 64,
    "depth": 16384,
    "description": "Banked Store",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.BankedStore.cc_banks_1",
    "address_width": 14,
    "name": "cc_banks_1",
    "data_width": 64,
    "depth": 16384,
    "description": "Banked Store",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.BankedStore.cc_banks_2",
    "address_width": 14,
    "name": "cc_banks_2",
    "data_width": 64,
    "depth": 16384,
    "description": "Banked Store",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.BankedStore.cc_banks_3",
    "address_width": 14,
    "name": "cc_banks_3",
    "data_width": 64,
    "depth": 16384,
    "description": "Banked Store",
    "write_mask_granularity": 64
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLFilter"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_82",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_83",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_13"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_84",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_85",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLJbar"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_86",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_87",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_9"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLInterconnectCoupler_23"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_88",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_89",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_90",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_91",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_6"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_7"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_8"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_9"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_10"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_10"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache>io.cpu.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache>io.cpu.s1_data"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray.array_0_0",
    "address_width": 9,
    "name": "array_0_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray.array_1_0",
    "address_width": 9,
    "name": "array_1_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray.array_2_0",
    "address_width": 9,
    "name": "array_2_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray.array_3_0",
    "address_width": 9,
    "name": "array_3_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB>io.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache>s1_xcpt_valid"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.zzguardrr_ram_new"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>io.cmd"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|instruction_cat1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_2>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_3>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_4>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_5>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_6>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_7>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_8>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_9>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_10>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_11>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_12>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_13>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_14>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|fifox_15>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q_full_counter"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[0].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[3].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[4]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[5]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[6]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[7]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[8]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[9]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[10]"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|zzguardrr_ram_new>q[2].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ICache>s1_hit"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache.tag_array",
    "address_width": 6,
    "name": "tag_array",
    "data_width": 84,
    "depth": 64,
    "description": "ICache Tag Array",
    "write_mask_granularity": 21
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache.data_arrays_0",
    "address_width": 9,
    "name": "data_arrays_0",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache.data_arrays_1",
    "address_width": 9,
    "name": "data_arrays_1",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_1>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_1>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_1>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB",
    "paramsClassName": "freechips.rocketchip.rocket.BTBParams",
    "params": {
      "nPages": 6,
      "nMatchBits": 14,
      "nRAS": 6,
      "updatesOutOfOrder": false,
      "nEntries": 28,
      "bhtParams": {
        "nEntries": 512,
        "counterLength": 1,
        "historyLength": 8,
        "historyBits": 3
      }
    }
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB",
    "paramsClassName": "freechips.rocketchip.rocket.BHTParams",
    "params": {
      "nEntries": 512,
      "counterLength": 1,
      "historyLength": 8,
      "historyBits": 3
    }
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_11"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_12"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_14"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_15"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile.traceCoreSourceNodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumDefAnnotation",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "definition": {
      "ITBrNTaken": 4,
      "ITBrTaken": 5,
      "ITReserved7": 7,
      "ITExcReturn": 3,
      "ITCoSwap": 12,
      "ITInJump": 15,
      "ITUnJump": 14,
      "ITUnTail": 10,
      "ITInterrupt": 2,
      "ITException": 1,
      "ITUnCall": 8,
      "ITReserved6": 6,
      "ITNothing": 0,
      "ITReturn": 13,
      "ITInTail": 11,
      "ITInCall": 9
    }
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile.auto.trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|FPUDecoder>decoder_decoded",
    "truthTable": "?????00??????????????????1000011->011110000000001001\n?????00??????????????????1000111->011110000000001001\n?????00??????????????????1001011->011110000000001001\n?????00??????????????????1001111->011110000000001001\n0000000??????????????????1010011->011100100000001001\n?????????????????010?????0000111->11000??????0000000\n?????????????????010?????0100111->100101?01000100000\n?????????????????011?????0000111->11000??????0000000\n?????????????????011?????0100111->100101?01010100000\n?????01??????????????????1000011->011110001010001001\n?????01??????????????????1000111->011110001010001001\n?????01??????????????????1001011->011110001010001001\n?????01??????????????????1001111->011110001010001001\n0000001??????????????????1010011->011100101010001001\n0000100??????????????????1010011->011100100000001001\n0000101??????????????????1010011->011100101010001001\n0001000??????????????????1010011->011100000000001001\n0001001??????????????????1010011->011100001010001001\n0001100??????????????????1010011->011100000000000101\n0001101??????????????????1010011->011100001010000101\n0010000??????????000?????1010011->011100000000010000\n0010000??????????001?????1010011->011100000000010000\n0010000??????????010?????1010011->011100000000010000\n0010001??????????000?????1010011->011100001010010000\n0010001??????????001?????1010011->011100001010010000\n0010001??????????010?????1010011->011100001010010000\n0010100??????????000?????1010011->011100000000010001\n0010100??????????001?????1010011->011100000000010001\n0010101??????????000?????1010011->011100001010010001\n0010101??????????001?????1010011->011100001010010001\n010000000001?????????????1010011->011000?01000010001\n010000100000?????????????1010011->011000?00010010001\n010110000000?????????????1010011->011000?00000000011\n010110100000?????????????1010011->011000?01010000011\n1010000??????????000?????1010011->001100000000100001\n1010000??????????001?????1010011->001100000000100001\n1010000??????????010?????1010011->001100000000100001\n1010001??????????000?????1010011->001100001010100001\n1010001??????????001?????1010011->001100001010100001\n1010001??????????010?????1010011->001100001010100001\n110000000000?????????????1010011->001000?00??0100001\n110000000001?????????????1010011->001000?00??0100001\n110000000010?????????????1010011->001000?00??0100001\n110000000011?????????????1010011->001000?00??0100001\n110000100000?????????????1010011->001000?01??0100001\n110000100001?????????????1010011->001000?01??0100001\n110000100010?????????????1010011->001000?01??0100001\n110000100011?????????????1010011->001000?01??0100001\n110100000000?????????????1010011->01000??00001000001\n110100000001?????????????1010011->01000??00001000001\n110100000010?????????????1010011->01000??00001000001\n110100000011?????????????1010011->01000??00001000001\n110100100000?????????????1010011->01000??01011000001\n110100100001?????????????1010011->01000??01011000001\n110100100010?????????????1010011->01000??01011000001\n110100100011?????????????1010011->01000??01011000001\n111000000000?????000?????1010011->001000?01000100000\n111000000000?????001?????1010011->001000?00000100000\n111000100000?????000?????1010011->001000?01010100000\n111000100000?????001?????1010011->001000?01010100000\n111100000000?????000?????1010011->01000??00011000000\n111100100000?????000?????1010011->01000??01011000000\n                                  ??????????????????",
    "minimizedTable": "?????????????????????????100??11->?1111?????????1??1\n000??0???????????????????1010011->?111?????????????1\n000?00???????????????????1010011->??????????????1???\n0000?0???????????????????1010011->??????1???????1???\n?????????????????01??????0?00111->1?????????????????\n?????????????????01??????0000111->?1????????????????\n?????????????????01??????0100111->???1?1??1???1?????\n?????????????????011?????0100111->??????????1???????\n?????01??????????????????100??11->????????1?1???????\n000??01??????????????????1010011->????????1?1???????\n000110???????????????????1010011->???????????????1??\n?01000???????????0?0?????1010011->??11??????????????\n?01000???????????00??????1010011->??11??????????????\n0010?0???????????00??????1010011->?111?????????1????\n001000???????????0?0?????1010011->?1???????????1????\n?010001??????????0?0?????1010011->????????1?1???????\n?010001??????????00??????1010011->????????1?1???????\n0010?01??????????00??????1010011->????????1?1???????\n001010???????????00??????1010011->?????????????????1\n?10000000001?????????????1010011->??1??????????????1\n010000000001?????????????1010011->?1??????1????1????\n?10000100000?????????????1010011->??1??????????????1\n010000100000?????????????1010011->?1????????1??1????\n010110?00000?????????????1010011->?11?????????????11\n010110100000?????????????1010011->????????1?1???????\n101000???????????0?0?????1010011->????????????1????1\n101000???????????00??????1010011->????????????1????1\n110?00?000???????????????1010011->?????????????????1\n110000?000???????????????1010011->??1?????????1?????\n110?001000???????????????1010011->????????1?????????\n110100?000???????????????1010011->?1?????????1??????\n1101001000???????????????1010011->??????????1???????\n111000?00000?????00??????1010011->??1?????????1?????\n111000?00000?????000?????1010011->????????1?????????\n111?00100000?????000?????1010011->????????1?????????\n111000100000?????00??????1010011->????????1?1???????\n111100?00000?????000?????1010011->?1????????11??????\n                                  ??????????????????"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToInt"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.IntToFP"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToFP"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe_1"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.RocketTile",
    "paramsClassName": "freechips.rocketchip.tile.RocketTileParams",
    "params": {
      "dataScratchpadBytes": 0,
      "btb": {
        "nEntries": 28,
        "nMatchBits": 14,
        "nPages": 6,
        "nRAS": 6,
        "bhtParams": {
          "nEntries": 512,
          "counterLength": 1,
          "historyLength": 8,
          "historyBits": 3
        },
        "updatesOutOfOrder": false
      },
      "icache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "cacheIdBits": 0,
        "prefetch": false,
        "blockBytes": 64,
        "latency": 2,
        "fetchBytes": 4
      },
      "tileId": 0,
      "core": {
        "bootFreqHz": 0,
        "useVM": true,
        "useUser": false,
        "useSupervisor": false,
        "useHypervisor": false,
        "useDebug": true,
        "useAtomics": true,
        "useAtomicsOnlyForIO": false,
        "useCompressed": true,
        "useRVE": false,
        "useConditionalZero": false,
        "nLocalInterrupts": 0,
        "useNMI": false,
        "nBreakpoints": 1,
        "useBPWatch": false,
        "mcontextWidth": 0,
        "scontextWidth": 0,
        "nPMPs": 8,
        "nPerfCounters": 0,
        "haveBasicCounters": true,
        "haveCFlush": false,
        "misaWritable": true,
        "nL2TLBEntries": 0,
        "nL2TLBWays": 1,
        "nPTECacheEntries": 8,
        "mtvecInit": 0,
        "mtvecWritable": true,
        "fastLoadWord": true,
        "fastLoadByte": false,
        "branchPredictionModeCSR": false,
        "clockGate": false,
        "mvendorid": 0,
        "mimpid": 538447876,
        "mulDiv": {
          "mulUnroll": 8,
          "divUnroll": 1,
          "mulEarlyOut": true,
          "divEarlyOut": true,
          "divEarlyOutGranularity": 1
        },
        "fpu": {
          "minFLen": 32,
          "fLen": 64,
          "divSqrt": true,
          "sfmaLatency": 3,
          "dfmaLatency": 4
        },
        "debugROB": false,
        "haveCease": true,
        "haveSimTimeout": true
      },
      "dcache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "replacementPolicy": "random",
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "dataECCBytes": 1,
        "nMSHRs": 16,
        "nSDQ": 17,
        "nRPQ": 16,
        "nMMIOs": 1,
        "blockBytes": 64,
        "separateUncachedResp": false,
        "acquireBeforeRelease": false,
        "pipelineWayMux": false,
        "clockGate": false
      },
      "clockSinkParams": {
        "phaseDeg": 0.0,
        "phaseErrorDeg": 5.0,
        "freqErrorPPM": 10000.0,
        "jitterPS": 200.0
      }
    }
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|Rocket>id_ctrl_decoder_decoded",
    "truthTable": "?????????????????000?????0000011->1000000111011001000010000000000010000000\n?????????????????000?????0001011->101000000001???100000?????00000000000000\n?????????????????000?????0001111->10000000????????????0?????00000000000100\n?????????????????000?????0010011->100000011101100100000?????00000010000000\n?????????????????????????0010111->100000001110010100000?????00000010000000\n?????????????????000?????0011011->100000011101100000000?????00000010000000\n?????????????????000?????0100011->1000001111010001000010000100000000000000\n?????????????????000?????0101011->101000000001???100000?????00000000000000\n0000000??????????000?????0110011->100000111001???100000?????00000010000000\n?????????????????????????0110111->100000001100010100000?????00000010000000\n0000000??????????000?????0111011->100000111001???000000?????00000010000000\n?????00??????????????????1000011->11000000????????????0?????11110000000000\n?????00??????????????????1000111->11000000????????????0?????11110000000000\n?????00??????????????????1001011->11000000????????????0?????11110000000000\n?????00??????????????????1001111->11000000????????????0?????11110000000000\n0000000??????????????????1010011->11000000????????????0?????11010000000000\n?????????????????000?????1011011->101000000001???100000?????00000000000000\n?????????????????000?????1100011->100100111001001100100?????00000000000000\n?????????????????000?????1100111->100001011101100100000?????00000010000000\n?????????????????????????1101111->100010000110011100000?????00000010000000\n00000000000000000000000001110011->1000000?????????????0?????00000001000000\n?????????????????000?????1111011->101000000001???100000?????00000000000000\n?????????????????001?????0000011->1000000111011001000010000000000010000000\n?????????????????001?????0001111->10000000????????????0?????00000000001100\n000000???????????001?????0010011->100000011101100100010?????00000010000000\n0000000??????????001?????0011011->100000011101100000010?????00000010000000\n?????????????????001?????0100011->1000001111010001000010000100000000000000\n0000000??????????001?????0110011->100000111001???100010?????00000010000000\n0000000??????????001?????0111011->100000111001???000010?????00000010000000\n?????????????????001?????1100011->100100111001001100110?????00000000000000\n?????????????????001?????1110011->100000010001???100000?????00000011010000\n?????????????????010?????0000011->1000000111011001000010000000000010000000\n?????????????????010?????0000111->1100000111011001000010000000010000000000\n?????????????????010?????0001011->101000010001???100000?????00000000000000\n?????????????????010?????0010011->100000011101100111000?????00000010000000\n?????????????????010?????0100011->1000001111010001000010000100000000000000\n?????????????????010?????0100111->1100000111010001000010000101000000000000\n?????????????????010?????0101011->101000010001???100000?????00000000000000\n00000????????????010?????0101111->100000110001???1000010100000000010000010\n0000000??????????010?????0110011->100000111001???111000?????00000010000000\n?????????????????010?????1011011->101000010001???100000?????00000000000000\n?????????????????010?????1110011->100000010001???100000?????00000011100000\n?????????????????010?????1111011->101000010001???100000?????00000000000000\n?????????????????011?????0000011->1000000111011001000010000000000010000000\n?????????????????011?????0000111->1100000111011001000010000000010000000001\n?????????????????011?????0001011->101000110001???100000?????00000000000000\n?????????????????011?????0010011->100000011101100111100?????00000010000000\n?????????????????011?????0100011->1000001111010001000010000100000000000000\n?????????????????011?????0100111->1100000111010001000010000101000000000001\n?????????????????011?????0101011->101000110001???100000?????00000000000000\n00000????????????011?????0101111->100000110001???1000010100000000010000010\n0000000??????????011?????0110011->100000111001???111100?????00000010000000\n?????????????????011?????1011011->101000110001???100000?????00000000000000\n?????????????????011?????1110011->100000010001???100000?????00000011110000\n?????????????????011?????1111011->101000110001???100000?????00000000000000\n?????????????????100?????0000011->1000000111011001000010000000000010000000\n?????????????????100?????0001011->101000000001???100000?????00000010000000\n?????????????????100?????0010011->100000011101100101000?????00000010000000\n?????????????????100?????0101011->101000000001???100000?????00000010000000\n0000000??????????100?????0110011->100000111001???101000?????00000010000000\n?????????????????100?????1011011->101000000001???100000?????00000010000000\n?????????????????100?????1100011->100100111001001111000?????00000000000000\n?????????????????100?????1111011->101000000001???100000?????00000010000000\n?????????????????101?????0000011->1000000111011001000010000000000010000000\n000000???????????101?????0010011->100000011101100101010?????00000010000000\n0000000??????????101?????0011011->100000011101100001010?????00000010000000\n0000000??????????101?????0110011->100000111001???101010?????00000010000000\n0000000??????????101?????0111011->100000111001???001010?????00000010000000\n?????????????????101?????1100011->100100111001001111010?????00000000000000\n?????????????????101?????1110011->100000001100101100000?????00000011010000\n?????????????????110?????0000011->1000000111011001000010000000000010000000\n?????????????????110?????0001011->101000010001???100000?????00000010000000\n?????????????????110?????0010011->100000011101100101100?????00000010000000\n?????????????????110?????0101011->101000010001???100000?????00000010000000\n0000000??????????110?????0110011->100000111001???101100?????00000010000000\n?????????????????110?????1011011->101000010001???100000?????00000010000000\n?????????????????110?????1100011->100100111001001111100?????00000000000000\n?????????????????110?????1110011->100000001100101100000?????00000011100000\n?????????????????110?????1111011->101000010001???100000?????00000010000000\n?????????????????111?????0001011->101000110001???100000?????00000010000000\n?????????????????111?????0010011->100000011101100101110?????00000010000000\n?????????????????111?????0101011->101000110001???100000?????00000010000000\n0000000??????????111?????0110011->100000111001???101110?????00000010000000\n?????????????????111?????1011011->101000110001???100000?????00000010000000\n?????????????????111?????1100011->100100111001001111110?????00000000000000\n?????????????????111?????1110011->100000001100101100000?????00000011110000\n?????????????????111?????1111011->101000110001???100000?????00000010000000\n00000000000100000000000001110011->1000000?????????????0?????00000001000000\n0000001??????????000?????0110011->100000111001???100000?????00000110000000\n0000001??????????000?????0111011->100000111001???000000?????00000110000000\n?????01??????????????????1000011->11000000????????????0?????11110000000001\n?????01??????????????????1000111->11000000????????????0?????11110000000001\n?????01??????????????????1001011->11000000????????????0?????11110000000001\n?????01??????????????????1001111->11000000????????????0?????11110000000001\n0000001??????????????????1010011->11000000????????????0?????11010000000001\n0000001??????????001?????0110011->100000111001???100010?????00000110000000\n0000001??????????010?????0110011->100000111001???100100?????00000110000000\n0000001??????????011?????0110011->100000111001???100110?????00000110000000\n0000001??????????100?????0110011->100000111001???101000?????00000110000000\n0000001??????????100?????0111011->100000111001???001000?????00000110000000\n0000001??????????101?????0110011->100000111001???101010?????00000110000000\n0000001??????????101?????0111011->100000111001???001010?????00000110000000\n0000001??????????110?????0110011->100000111001???101100?????00000110000000\n0000001??????????110?????0111011->100000111001???001100?????00000110000000\n0000001??????????111?????0110011->100000111001???101110?????00000110000000\n0000001??????????111?????0111011->100000111001???001110?????00000110000000\n0000100??????????????????1010011->11000000????????????0?????11010000000000\n00001????????????010?????0101111->100000110001???1000010010000000010000010\n00001????????????011?????0101111->100000110001???1000010010000000010000010\n0000101??????????????????1010011->11000000????????????0?????11010000000001\n0001000??????????????????1010011->11000000????????????0?????11010000000000\n00010??00000?????010?????0101111->100000110001???1000010011000000010000010\n00010??00000?????011?????0101111->100000110001???1000010011000000010000010\n00010000001000000000000001110011->1000000?????????????0?????00000001000000\n00010000010100000000000001110011->1000000?????????????0?????00000001000000\n0001001??????????????????1010011->11000000????????????0?????11010000000001\n0001001??????????000000001110011->100000110001???1000011010000000001000000\n0001100??????????????????1010011->11000000????????????0?????11010000000000\n00011????????????010?????0101111->100000110001???1000010011100000010000010\n00011????????????011?????0101111->100000110001???1000010011100000010000010\n0001101??????????????????1010011->11000000????????????0?????11010000000001\n0010000??????????000?????1010011->11000000????????????0?????11010000000000\n0010000??????????001?????1010011->11000000????????????0?????11010000000000\n00100????????????010?????0101111->100000110001???1000010100100000010000010\n0010000??????????010?????1010011->11000000????????????0?????11010000000000\n00100????????????011?????0101111->100000110001???1000010100100000010000010\n0010001??????????000?????1010011->11000000????????????0?????11010000000001\n0010001??????????001?????1010011->11000000????????????0?????11010000000001\n0010001??????????010?????1010011->11000000????????????0?????11010000000001\n0010100??????????000?????1010011->11000000????????????0?????11010000000000\n0010100??????????001?????1010011->11000000????????????0?????11010000000000\n0010101??????????000?????1010011->11000000????????????0?????11010000000001\n0010101??????????001?????1010011->11000000????????????0?????11010000000001\n00110000001000000000000001110011->1000000?????????????0?????00000001000000\n00110000010100000000000001110011->1000000?????????????0?????00000001000000\n0100000??????????000?????0110011->100000111001???110100?????00000010000000\n0100000??????????000?????0111011->100000111001???010100?????00000010000000\n01000????????????010?????0101111->100000110001???1000010101000000010000010\n01000????????????011?????0101111->100000110001???1000010101000000010000010\n010000???????????101?????0010011->100000011101100110110?????00000010000000\n0100000??????????101?????0011011->100000011101100010110?????00000010000000\n0100000??????????101?????0110011->100000111001???110110?????00000010000000\n0100000??????????101?????0111011->100000111001???010110?????00000010000000\n010000000001?????????????1010011->11000000????????????0?????10010000000001\n010000100000?????????????1010011->11000000????????????0?????10010000000001\n010110000000?????????????1010011->11000000????????????0?????11010000000000\n010110100000?????????????1010011->11000000????????????0?????11010000000001\n01100????????????010?????0101111->100000110001???1000010101100000010000010\n01100????????????011?????0101111->100000110001???1000010101100000010000010\n01111011001000000000000001110011->1000000?????????????0?????00000001000000\n10000????????????010?????0101111->100000110001???1000010110000000010000010\n10000????????????011?????0101111->100000110001???1000010110000000010000010\n1010000??????????000?????1010011->11000000????????????0?????11000010000000\n1010000??????????001?????1010011->11000000????????????0?????11000010000000\n10100????????????010?????0101111->100000110001???1000010110100000010000010\n1010000??????????010?????1010011->11000000????????????0?????11000010000000\n10100????????????011?????0101111->100000110001???1000010110100000010000010\n1010001??????????000?????1010011->11000000????????????0?????11000010000001\n1010001??????????001?????1010011->11000000????????????0?????11000010000001\n1010001??????????010?????1010011->11000000????????????0?????11000010000001\n110000000000?????????????1010011->11000000????????????0?????10000010000000\n11000????????????010?????0101111->100000110001???1000010111000000010000010\n11000????????????011?????0101111->100000110001???1000010111000000010000010\n110000000001?????????????1010011->11000000????????????0?????10000010000000\n110000000010?????????????1010011->11000000????????????0?????10000010000000\n110000000011?????????????1010011->11000000????????????0?????10000010000000\n110000100000?????????????1010011->11000000????????????0?????10000010000001\n110000100001?????????????1010011->11000000????????????0?????10000010000001\n110000100010?????????????1010011->11000000????????????0?????10000010000001\n110000100011?????????????1010011->11000000????????????0?????10000010000001\n110100000000?????????????1010011->11000001??01????????0?????00010000000000\n110100000001?????????????1010011->11000001??01????????0?????00010000000000\n110100000010?????????????1010011->11000001??01????????0?????00010000000000\n110100000011?????????????1010011->11000001??01????????0?????00010000000000\n110100100000?????????????1010011->11000001??01????????0?????00010000000001\n110100100001?????????????1010011->11000001??01????????0?????00010000000001\n110100100010?????????????1010011->11000001??01????????0?????00010000000001\n110100100011?????????????1010011->11000001??01????????0?????00010000000001\n111000000000?????000?????1010011->11000000????????????0?????10000010000000\n111000000000?????001?????1010011->11000000????????????0?????10000010000000\n11100????????????010?????0101111->100000110001???1000010111100000010000010\n11100????????????011?????0101111->100000110001???1000010111100000010000010\n111000100000?????000?????1010011->11000000????????????0?????10000010000001\n111000100000?????001?????1010011->11000000????????????0?????10000010000001\n111100000000?????000?????1010011->11000001??01????????0?????00010000000000\n111100100000?????000?????1010011->11000001??01????????0?????00010000000001\n                                  0???????????????????0???????????????????",
    "minimizedTable": "???????????????????0?????00?0011->1??????111?11??1????????????????1???????\n???????????????????0?????0000011->????????????????????1???????????????????\n??????????????????0??????0000011->1??????111?11??1????1???????????1???????\n?????????????????0???????0?00011->1??????111?1???1????1???????????????????\n?????????????????0???????0000011->????????????????????????????????1???????\n?????????????????000?????00??011->1??????????1????????????????????????????\n???????????????????0?????0?01011->1?1????????1???1????????????????????????\n?????????????????00??????0001111->1????????????????????????????????????1??\n?????????????????000?????001?011->???????111??1???????????????????1???????\n?????????????????????????0?10111->1???????11???1?1????????????????1???????\n?????????????????????????0010111->??????????1?????????????????????????????\n?????????????????0???????0100011->??????1??????????????????1??????????????\n?????????????????00???????100011->??????1?????????????????????????????????\n0?00000??????????000?????011?011->1?????111??1????????????????????1???????\n0?00000??????????000?????0110011->???????????????1????????????????????????\n000000???????????????????0110011->1?????111??1???1????????????????1???????\n000000???????????000?????011?011->1?????111??1????????????????????1???????\n0000000??????????00??????011?011->??????1?????????????????????????????????\n?????????????????????????100??11->?1????????????????????????1111??????????\n?????0???????????????????100??11->1???????????????????????????????????????\n000??0???????????????????1010011->11????????????????????????11?1??????????\n???????????????????0?????1?11011->1?1????????1???1????????????????????????\n??????????????????0??????1100011->???1????1?????1?????????????????????????\n?????????????????00??????1100011->??????????????????1?????????????????????\n?????????????????000?????1100?11->1??????11??1???1????????????????????????\n?????????????????000?????1100111->?????1???1??1???????????????????1???????\n?????????????????????????1101111->1???1????11??111????????????????1???????\n00000000000?00000000000001110??1->?????????????????????????????????1??????\n00000000000?00000000000001110011->1???????????????????????????????????????\n?????????????????001?????0001111->????????????????????????????????????1???\n000000????????????01?????0?10011->1??????11??1???1???1????????????1???????\n000000????????????01?????0010011->?????????1??1???????????????????????????\n0000000???????????01?????0?11011->1??????11??1???????1????????????1???????\n0000000???????????01?????0011011->?????????1??1???????????????????????????\n??????????????????01?????11?0011->1??????????????1????????????????????????\n??????????????????01?????1100011->???????????????????1????????????????????\n?????????????????001?????11?0011->???????1???1????????????????????????????\n???????????????????1?????1110011->????????????????????????????????11?1????\n?????????????????01??????0?00?11->1??????111?1???1????1???????????????????\n?????????????????01??????0000?11->????????????1???????????????????????????\n?????????????????01??????0?00111->?1??????????????????????????????????????\n?????????????????01??????0000111->?????????????????????????????1??????????\n??????????????????1??????0?01011->1?1????1???1???1????????????????????????\n??????????????????1??????0010011->1??????111?11??1?1??????????????1???????\n?????????????????01??????0010011->????????????????1???????????????????????\n?????????????????01??????0100?11->?????????????????????????1??????????????\n?????????????????01??????0100111->???????????????????????????1????????????\n???00????????????01??????0101111->1?????11???1???1????1?1?????????1?????1?\n0000000???????????1??????0110011->?????????????????1??????????????????????\n0000000??????????01??????0110011->????????????????1???????????????????????\n??????????????????1??????1?11011->1?1????1???1???1????????????????????????\n??????????????????1??????111?011->1??????????????1????????????????????????\n??????????????????1??????1110011->????????????????????????????????111?????\n?????????????????01??????111?011->???????1???1????????????????????????????\n?????????????????011?????0?00111->???????????????????????????????????????1\n??????????????????11?????0?01011->??????1?????????????????????????????????\n??????????????????11?????0010011->??????????????????1?????????????????????\n000000????????????11?????0110011->??????????????????1?????????????????????\n??????????????????11?????1?11011->??????1?????????????????????????????????\n?????????????????1?0?????0?01011->????????????????????????????????1???????\n?????????????????1?0?????0010011->?????????????????1??????????????????????\n000000???????????1???????0110011->?????????????????1??????????????????????\n?????????????????1?0?????1?11011->????????????????????????????????1???????\n?????????????????1???????1100011->1??1??11???1???111??????????????????????\n0?0000???????????101?????0010011->1??????111?11??1???1????????????1???????\n000000???????????101?????0?10011->?????????????????1??????????????????????\n0?00000??????????101?????0?11011->1??????11??1???????1????????????1???????\n0?00000??????????101?????0011011->?????????1??1???????????????????????????\n0000000??????????101?????0?11011->?????????????????1??????????????????????\n0?00000??????????101?????011?011->1?????111??1???????1????????????1???????\n0?00000??????????101?????0110011->???????????????1????????????????????????\n000000???????????1?1?????0110011->???????????????????1????????????????????\n?????????????????1?1?????11?0011->????????1?????1?????????????????????????\n?????????????????1?1?????1100011->???????????????????1????????????????????\n?????????????????1?1?????1110011->?????????1??1???????????????????????????\n?????????????????11??????0?01011->????????????????????????????????1???????\n?????????????????11??????0010011->??????????????????1?????????????????????\n000000???????????11??????0110011->??????????????????1?????????????????????\n?????????????????11??????1?11011->????????????????????????????????1???????\n?????????????????11??????11?0011->????????1?????1?????????????????????????\n?????????????????11??????1100011->??????????????????1?????????????????????\n?????????????????11??????1110011->?????????1??1???????????????????????????\n?????????????????111?????0010011->???????????????????1????????????????????\n0000001??????????????????0110011->???????????????????????????????1????????\n0000001???????????00?????011?011->???????????????????????????????1????????\n?????01??????????????????100??11->???????????????????????????????????????1\n000??01??????????????????1010011->???????????????????????????????????????1\n0000001????????????1?????0110011->???????????????????1????????????????????\n0000001???????????1??????0110011->??????????????????1?????????????????????\n0000001??????????1???????011?011->1?????111??1?????1?????????????11???????\n0000001??????????1?1?????011?011->???????????????????1????????????????????\n0000001??????????11??????011?011->??????????????????1?????????????????????\n000?1????????????01??????0101111->1?????11???1???1????1??1????????1?????1?\n00010??00000?????????????0101111->??????11???1???1???????11???????1?????1?\n00010??00000?????01??????0101111->1???????????????????1???????????????????\n00?10000001000000000000001110??1->?????????????????????????????????1??????\n00?10000001000000000000001110011->1???????????????????????????????????????\n00?10000010100000000000001110??1->?????????????????????????????????1??????\n00?10000010100000000000001110011->1???????????????????????????????????????\n0001001???????????????0001110011->???????????????1?????1?1?????????1??????\n0001001??????????0????0001110011->???????1???1????????????????????????????\n0001001??????????000??0001110011->??????1?????????????????????????????????\n0001001??????????000000001110011->1???????????????????1???????????????????\n00011????????????01??????0101111->????????????????????????11??????????????\n?01000???????????0?0?????1010011->11????????????????????????11????????????\n?01000???????????00??????1010011->11????????????????????????11????????????\n0010?0???????????00??????1010011->11????????????????????????11?1??????????\n001000???????????0?0?????1010011->?????????????????????????????1??????????\n??100????????????01??????0101111->?????????????????????????1??????????????\n?010001??????????0?0?????1010011->???????????????????????????????????????1\n?010001??????????00??????1010011->???????????????????????????????????????1\n0010?01??????????00??????1010011->???????????????????????????????????????1\n0100000??????????000?????011?011->????????????????1?1?????????????????????\n?1?00????????????01??????0101111->????????????????????????1???????????????\n010000???????????101?????0010011->????????????????1?1?????????????????????\n0100000??????????101?????0?11011->????????????????1?1?????????????????????\n0100000??????????101?????011?011->????????????????1?1?????????????????????\n?10000000001?????????????1010011->11????????????????????????1?????????????\n010000000001?????????????1010011->?????????????????????????????1?????????1\n?10000100000?????????????1010011->11????????????????????????1????????????1\n010000100000?????????????1010011->?????????????????????????????1??????????\n010110?00000?????????????1010011->11????????????????????????11?1??????????\n010110100000?????????????1010011->???????????????????????????????????????1\n01111011001000000000000001110???->?????????????????????????????????1??????\n01111011001000000000000001110011->1???????????????????????????????????????\n1??00????????????01??????0101111->???????????????????????1????????????????\n101000???????????0?0?????1010011->????????????????????????????????1???????\n101000???????????00??????1010011->????????????????????????????????1???????\n11??00?00000?????????????1010011->?1??????????????????????????????????????\n110?00?000???????????????1010011->11??????????????????????????????????????\n110000?000???????????????1010011->??????????????????????????1?????1???????\n110?001000???????????????1010011->???????????????????????????????????????1\n110100?000???????????????1010011->???????1???1?????????????????1??????????\n111?00?00000?????000?????1010011->1???????????????????????????????????????\n111000?00000?????00??????1010011->1?????????????????????????1?????1???????\n111?00100000?????000?????1010011->???????????????????????????????????????1\n111000100000?????00??????1010011->???????????????????????????????????????1\n111100?00000?????000?????1010011->???????1???1?????????????????1??????????\n                                  0???????????????????0???????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>decoded_decoded",
    "truthTable": "000000000001->000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000010->000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000011->000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000100000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000\n000100000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000\n000100000101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000\n000100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\n000100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000\n000101000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000\n000101000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000\n000101000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000\n000101000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000\n000101000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000\n000110000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000\n001100000000->000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000001->000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000\n001100000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000\n001100000100->000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000101->000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000\n001100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000\n001100100000->000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100011->000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100100->000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100101->000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100110->000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100111->000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101000->000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101001->000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101010->000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101011->000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101100->000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101101->000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101110->000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101111->000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110000->000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110001->000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110010->000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110011->000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110100->000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110101->000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000\n001100110110->000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000\n001100110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000\n001100111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000\n001100111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000\n001100111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000\n001100111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000\n001100111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000\n001100111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000\n001100111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000\n001100111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000\n001101000000->000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000001->000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000010->000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000011->000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000100->000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001110100000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000\n001110100010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000\n001110110000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000\n001110110001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000\n001110110010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000\n001110110011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000\n001110110100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000\n001110110101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000\n001110110110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000\n001110110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000\n001110111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000\n001110111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000\n001110111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000\n001110111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000\n001110111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000\n001110111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000\n001110111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000\n001110111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000\n011110100000->100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100001->010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100010->001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100011->000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110000->000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110001->000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110010->000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011111000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000\n101100000000->000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000010->000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000011->000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000100->000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000101->000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000110->000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000111->000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001000->000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001001->000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001010->000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001011->000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001100->000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001101->000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001110->000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001111->000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010000->000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010001->000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010010->000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010011->000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010100->000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000\n101100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000\n101100010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000\n101100010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000\n101100011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000\n101100011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000\n101100011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000\n101100011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000\n101100011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000\n101100011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000\n101100011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000\n101100011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000\n110000000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000\n110000000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000\n110000000011->000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000100->000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000101->000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000110->000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000111->000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001000->000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001001->000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001010->000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001011->000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001100->000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001101->000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001110->000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001111->000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010000->000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010001->000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010010->000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010011->000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010100->000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000\n110000010101->000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000\n110000010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000\n110000010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000\n110000011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000\n110000011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000\n110000011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000\n110000011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000\n110000011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000\n110000011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000\n110000011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000\n110000011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000\n111100010001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100\n111100010010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000\n111100010011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010\n111100010100->000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n111100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
    "minimizedTable": "00000000000?->?????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000010->??????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000011->???????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0001000000??->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????\n000100000100->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????\n000100000101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????\n00010000011?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????\n000100001???->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????\n000101000000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????\n000101000001->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????\n000101000010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????\n000101000011->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????\n0001010001??->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????\n00011???????->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????\n001100000000->?????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000001->????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000010->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????\n001100000011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????\n001100000100->????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000101->??????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110000011?->??????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????\n001100001???->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????\n00110010000?->????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110010001?->???????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100100->??????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100101->?????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100110->????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100111->???????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101000->??????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101001->?????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101010->????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101011->???????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101100->??????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????\n001100101101->?????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????\n001100101110->????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????\n001100101111->???????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????\n001100110000->??????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????\n001100110001->?????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????\n001100110010->????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????\n001100110011->???????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????\n001100110100->??????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????\n001100110101->?????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????\n001100110110->????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????\n001100110111->???????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????\n001100111000->??????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????\n001100111001->?????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????\n001100111010->????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????\n001100111011->???????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????\n001100111100->??????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????\n001100111101->?????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????\n001100111110->????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????\n001100111111->???????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????\n001101000000->?????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000001->??????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000010->????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000011->???????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0011010001??->???????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00111010000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????\n00111010001?->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????\n001110110000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????\n001110110001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????\n001110110010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????\n001110110011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????\n001110110100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????\n001110110101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????\n001110110110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????\n001110110111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????\n001110111000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????\n001110111001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????\n001110111010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????\n001110111011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????\n001110111100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????\n001110111101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????\n001110111110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????\n001110111111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????\n011110100000->1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100001->?1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100010->??1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100011->???1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110000->??????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110001->???????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n01111011001?->????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011111??????->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????\n10110000000?->?????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000010->??????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000011->????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000100->???????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000101->??????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000110->?????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000111->????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001000->???????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001001->??????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001010->?????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001011->????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001100->???????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????\n101100001101->??????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????\n101100001110->?????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????\n101100001111->????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????\n101100010000->???????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????\n101100010001->??????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????\n101100010010->?????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????\n101100010011->????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????\n101100010100->???????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????\n101100010101->??????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????\n101100010110->?????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????\n101100010111->????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????\n101100011000->???????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????\n101100011001->??????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????\n101100011010->?????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????\n101100011011->????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????\n101100011100->???????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????\n101100011101->??????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????\n101100011110->?????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????\n101100011111->????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????\n11000000000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????\n110000000010->????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????\n110000000011->?????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000100->????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000101->???????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000110->??????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000111->?????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001000->????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001001->???????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001010->??????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001011->?????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001100->????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????\n110000001101->???????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????\n110000001110->??????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????\n110000001111->?????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????\n110000010000->????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????\n110000010001->???????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????\n110000010010->??????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????\n110000010011->?????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????\n110000010100->????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????\n110000010101->???????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????\n110000010110->??????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????\n110000010111->?????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????\n110000011000->????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????\n110000011001->???????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????\n110000011010->??????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????\n110000011011->?????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????\n110000011100->????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????\n110000011101->???????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????\n110000011110->??????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????\n110000011111->?????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????\n11110001000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??\n111100010010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???\n111100010011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?\n111100010100->?????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n111100010101->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>decoded",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>decoded_150",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>io_decode_0_fp_csr_plaOutput",
    "truthTable": "000000000001->1\n000000000010->1\n000000000011->1\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "0000????????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>io_decode_0_read_illegal_plaOutput",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->1\n011110110001->1\n011110110010->1\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "01111011????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile>io_decode_0_read_illegal_plaOutput_1",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "????????????->0\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|MulDiv>decoded",
    "truthTable": "000->10??\n001->1111\n010->1110\n011->1100\n100->0011\n101->0000\n110->0111\n111->0100\n     ????",
    "minimizedTable": "??0->??1?\n0??->1???\n00?->??11\n0?1->?1??\n?1?->?1??\n1?0->???1\n     ????"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_92",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain.auto.rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.FixedClockBroadcast_6"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_93",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_94",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.TilePRCIDomain.auto.element_reset_domain_rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_95",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_96",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_97",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_98",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_11"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_12"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_13"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_14"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_15"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_13"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_1>io.cpu.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_1>io.cpu.s1_data"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_2>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_2>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_2>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_2>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_1.array_0_0",
    "address_width": 9,
    "name": "array_0_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_1.array_1_0",
    "address_width": 9,
    "name": "array_1_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_1.array_2_0",
    "address_width": 9,
    "name": "array_2_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_1.array_3_0",
    "address_width": 9,
    "name": "array_3_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_2>io.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_1>s1_xcpt_valid"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc>fifo_addr"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_1"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_1>fifo_addr"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_2"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_2>fifo_addr"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_3"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_3>fifo_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ICache_1>s1_hit"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_1.tag_array",
    "address_width": 6,
    "name": "tag_array",
    "data_width": 84,
    "depth": 64,
    "description": "ICache Tag Array",
    "write_mask_granularity": 21
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_1.data_arrays_0",
    "address_width": 9,
    "name": "data_arrays_0",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_1.data_arrays_1",
    "address_width": 9,
    "name": "data_arrays_1",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_3>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_3>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_3>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_3>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB_1",
    "paramsClassName": "freechips.rocketchip.rocket.BTBParams",
    "params": {
      "nPages": 6,
      "nMatchBits": 14,
      "nRAS": 6,
      "updatesOutOfOrder": false,
      "nEntries": 28,
      "bhtParams": {
        "nEntries": 512,
        "counterLength": 1,
        "historyLength": 8,
        "historyBits": 3
      }
    }
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB_1",
    "paramsClassName": "freechips.rocketchip.rocket.BHTParams",
    "params": {
      "nEntries": 512,
      "counterLength": 1,
      "historyLength": 8,
      "historyBits": 3
    }
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_14"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_15"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_16"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_17"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile_1.traceCoreSourceNodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile_1.auto.trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|FPUDecoder_1>decoder_decoded",
    "truthTable": "?????00??????????????????1000011->011110000000001001\n?????00??????????????????1000111->011110000000001001\n?????00??????????????????1001011->011110000000001001\n?????00??????????????????1001111->011110000000001001\n0000000??????????????????1010011->011100100000001001\n?????????????????010?????0000111->11000??????0000000\n?????????????????010?????0100111->100101?01000100000\n?????????????????011?????0000111->11000??????0000000\n?????????????????011?????0100111->100101?01010100000\n?????01??????????????????1000011->011110001010001001\n?????01??????????????????1000111->011110001010001001\n?????01??????????????????1001011->011110001010001001\n?????01??????????????????1001111->011110001010001001\n0000001??????????????????1010011->011100101010001001\n0000100??????????????????1010011->011100100000001001\n0000101??????????????????1010011->011100101010001001\n0001000??????????????????1010011->011100000000001001\n0001001??????????????????1010011->011100001010001001\n0001100??????????????????1010011->011100000000000101\n0001101??????????????????1010011->011100001010000101\n0010000??????????000?????1010011->011100000000010000\n0010000??????????001?????1010011->011100000000010000\n0010000??????????010?????1010011->011100000000010000\n0010001??????????000?????1010011->011100001010010000\n0010001??????????001?????1010011->011100001010010000\n0010001??????????010?????1010011->011100001010010000\n0010100??????????000?????1010011->011100000000010001\n0010100??????????001?????1010011->011100000000010001\n0010101??????????000?????1010011->011100001010010001\n0010101??????????001?????1010011->011100001010010001\n010000000001?????????????1010011->011000?01000010001\n010000100000?????????????1010011->011000?00010010001\n010110000000?????????????1010011->011000?00000000011\n010110100000?????????????1010011->011000?01010000011\n1010000??????????000?????1010011->001100000000100001\n1010000??????????001?????1010011->001100000000100001\n1010000??????????010?????1010011->001100000000100001\n1010001??????????000?????1010011->001100001010100001\n1010001??????????001?????1010011->001100001010100001\n1010001??????????010?????1010011->001100001010100001\n110000000000?????????????1010011->001000?00??0100001\n110000000001?????????????1010011->001000?00??0100001\n110000000010?????????????1010011->001000?00??0100001\n110000000011?????????????1010011->001000?00??0100001\n110000100000?????????????1010011->001000?01??0100001\n110000100001?????????????1010011->001000?01??0100001\n110000100010?????????????1010011->001000?01??0100001\n110000100011?????????????1010011->001000?01??0100001\n110100000000?????????????1010011->01000??00001000001\n110100000001?????????????1010011->01000??00001000001\n110100000010?????????????1010011->01000??00001000001\n110100000011?????????????1010011->01000??00001000001\n110100100000?????????????1010011->01000??01011000001\n110100100001?????????????1010011->01000??01011000001\n110100100010?????????????1010011->01000??01011000001\n110100100011?????????????1010011->01000??01011000001\n111000000000?????000?????1010011->001000?01000100000\n111000000000?????001?????1010011->001000?00000100000\n111000100000?????000?????1010011->001000?01010100000\n111000100000?????001?????1010011->001000?01010100000\n111100000000?????000?????1010011->01000??00011000000\n111100100000?????000?????1010011->01000??01011000000\n                                  ??????????????????",
    "minimizedTable": "?????????????????????????100??11->?1111?????????1??1\n000??0???????????????????1010011->?111?????????????1\n000?00???????????????????1010011->??????????????1???\n0000?0???????????????????1010011->??????1???????1???\n?????????????????01??????0?00111->1?????????????????\n?????????????????01??????0000111->?1????????????????\n?????????????????01??????0100111->???1?1??1???1?????\n?????????????????011?????0100111->??????????1???????\n?????01??????????????????100??11->????????1?1???????\n000??01??????????????????1010011->????????1?1???????\n000110???????????????????1010011->???????????????1??\n?01000???????????0?0?????1010011->??11??????????????\n?01000???????????00??????1010011->??11??????????????\n0010?0???????????00??????1010011->?111?????????1????\n001000???????????0?0?????1010011->?1???????????1????\n?010001??????????0?0?????1010011->????????1?1???????\n?010001??????????00??????1010011->????????1?1???????\n0010?01??????????00??????1010011->????????1?1???????\n001010???????????00??????1010011->?????????????????1\n?10000000001?????????????1010011->??1??????????????1\n010000000001?????????????1010011->?1??????1????1????\n?10000100000?????????????1010011->??1??????????????1\n010000100000?????????????1010011->?1????????1??1????\n010110?00000?????????????1010011->?11?????????????11\n010110100000?????????????1010011->????????1?1???????\n101000???????????0?0?????1010011->????????????1????1\n101000???????????00??????1010011->????????????1????1\n110?00?000???????????????1010011->?????????????????1\n110000?000???????????????1010011->??1?????????1?????\n110?001000???????????????1010011->????????1?????????\n110100?000???????????????1010011->?1?????????1??????\n1101001000???????????????1010011->??????????1???????\n111000?00000?????00??????1010011->??1?????????1?????\n111000?00000?????000?????1010011->????????1?????????\n111?00100000?????000?????1010011->????????1?????????\n111000100000?????00??????1010011->????????1?1???????\n111100?00000?????000?????1010011->?1????????11??????\n                                  ??????????????????"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe_2"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToInt_1"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.IntToFP_1"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToFP_1"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe_3"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.RocketTile_1",
    "paramsClassName": "freechips.rocketchip.tile.RocketTileParams",
    "params": {
      "dataScratchpadBytes": 0,
      "btb": {
        "nEntries": 28,
        "nMatchBits": 14,
        "nPages": 6,
        "nRAS": 6,
        "bhtParams": {
          "nEntries": 512,
          "counterLength": 1,
          "historyLength": 8,
          "historyBits": 3
        },
        "updatesOutOfOrder": false
      },
      "icache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "cacheIdBits": 0,
        "prefetch": false,
        "blockBytes": 64,
        "latency": 2,
        "fetchBytes": 4
      },
      "tileId": 1,
      "core": {
        "bootFreqHz": 0,
        "useVM": true,
        "useUser": false,
        "useSupervisor": false,
        "useHypervisor": false,
        "useDebug": true,
        "useAtomics": true,
        "useAtomicsOnlyForIO": false,
        "useCompressed": true,
        "useRVE": false,
        "useConditionalZero": false,
        "nLocalInterrupts": 0,
        "useNMI": false,
        "nBreakpoints": 1,
        "useBPWatch": false,
        "mcontextWidth": 0,
        "scontextWidth": 0,
        "nPMPs": 8,
        "nPerfCounters": 0,
        "haveBasicCounters": true,
        "haveCFlush": false,
        "misaWritable": true,
        "nL2TLBEntries": 0,
        "nL2TLBWays": 1,
        "nPTECacheEntries": 8,
        "mtvecInit": 0,
        "mtvecWritable": true,
        "fastLoadWord": true,
        "fastLoadByte": false,
        "branchPredictionModeCSR": false,
        "clockGate": false,
        "mvendorid": 0,
        "mimpid": 538447876,
        "mulDiv": {
          "mulUnroll": 8,
          "divUnroll": 1,
          "mulEarlyOut": true,
          "divEarlyOut": true,
          "divEarlyOutGranularity": 1
        },
        "fpu": {
          "minFLen": 32,
          "fLen": 64,
          "divSqrt": true,
          "sfmaLatency": 3,
          "dfmaLatency": 4
        },
        "debugROB": false,
        "haveCease": true,
        "haveSimTimeout": true
      },
      "dcache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "replacementPolicy": "random",
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "dataECCBytes": 1,
        "nMSHRs": 16,
        "nSDQ": 17,
        "nRPQ": 16,
        "nMMIOs": 1,
        "blockBytes": 64,
        "separateUncachedResp": false,
        "acquireBeforeRelease": false,
        "pipelineWayMux": false,
        "clockGate": false
      },
      "clockSinkParams": {
        "phaseDeg": 0.0,
        "phaseErrorDeg": 5.0,
        "freqErrorPPM": 10000.0,
        "jitterPS": 200.0
      }
    }
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|Rocket_1>id_ctrl_decoder_decoded",
    "truthTable": "?????????????????000?????0000011->1000000111011001000010000000000010000000\n?????????????????000?????0001011->101000000001???100000?????00000000000000\n?????????????????000?????0001111->10000000????????????0?????00000000000100\n?????????????????000?????0010011->100000011101100100000?????00000010000000\n?????????????????????????0010111->100000001110010100000?????00000010000000\n?????????????????000?????0011011->100000011101100000000?????00000010000000\n?????????????????000?????0100011->1000001111010001000010000100000000000000\n?????????????????000?????0101011->101000000001???100000?????00000000000000\n0000000??????????000?????0110011->100000111001???100000?????00000010000000\n?????????????????????????0110111->100000001100010100000?????00000010000000\n0000000??????????000?????0111011->100000111001???000000?????00000010000000\n?????00??????????????????1000011->11000000????????????0?????11110000000000\n?????00??????????????????1000111->11000000????????????0?????11110000000000\n?????00??????????????????1001011->11000000????????????0?????11110000000000\n?????00??????????????????1001111->11000000????????????0?????11110000000000\n0000000??????????????????1010011->11000000????????????0?????11010000000000\n?????????????????000?????1011011->101000000001???100000?????00000000000000\n?????????????????000?????1100011->100100111001001100100?????00000000000000\n?????????????????000?????1100111->100001011101100100000?????00000010000000\n?????????????????????????1101111->100010000110011100000?????00000010000000\n00000000000000000000000001110011->1000000?????????????0?????00000001000000\n?????????????????000?????1111011->101000000001???100000?????00000000000000\n?????????????????001?????0000011->1000000111011001000010000000000010000000\n?????????????????001?????0001111->10000000????????????0?????00000000001100\n000000???????????001?????0010011->100000011101100100010?????00000010000000\n0000000??????????001?????0011011->100000011101100000010?????00000010000000\n?????????????????001?????0100011->1000001111010001000010000100000000000000\n0000000??????????001?????0110011->100000111001???100010?????00000010000000\n0000000??????????001?????0111011->100000111001???000010?????00000010000000\n?????????????????001?????1100011->100100111001001100110?????00000000000000\n?????????????????001?????1110011->100000010001???100000?????00000011010000\n?????????????????010?????0000011->1000000111011001000010000000000010000000\n?????????????????010?????0000111->1100000111011001000010000000010000000000\n?????????????????010?????0001011->101000010001???100000?????00000000000000\n?????????????????010?????0010011->100000011101100111000?????00000010000000\n?????????????????010?????0100011->1000001111010001000010000100000000000000\n?????????????????010?????0100111->1100000111010001000010000101000000000000\n?????????????????010?????0101011->101000010001???100000?????00000000000000\n00000????????????010?????0101111->100000110001???1000010100000000010000010\n0000000??????????010?????0110011->100000111001???111000?????00000010000000\n?????????????????010?????1011011->101000010001???100000?????00000000000000\n?????????????????010?????1110011->100000010001???100000?????00000011100000\n?????????????????010?????1111011->101000010001???100000?????00000000000000\n?????????????????011?????0000011->1000000111011001000010000000000010000000\n?????????????????011?????0000111->1100000111011001000010000000010000000001\n?????????????????011?????0001011->101000110001???100000?????00000000000000\n?????????????????011?????0010011->100000011101100111100?????00000010000000\n?????????????????011?????0100011->1000001111010001000010000100000000000000\n?????????????????011?????0100111->1100000111010001000010000101000000000001\n?????????????????011?????0101011->101000110001???100000?????00000000000000\n00000????????????011?????0101111->100000110001???1000010100000000010000010\n0000000??????????011?????0110011->100000111001???111100?????00000010000000\n?????????????????011?????1011011->101000110001???100000?????00000000000000\n?????????????????011?????1110011->100000010001???100000?????00000011110000\n?????????????????011?????1111011->101000110001???100000?????00000000000000\n?????????????????100?????0000011->1000000111011001000010000000000010000000\n?????????????????100?????0001011->101000000001???100000?????00000010000000\n?????????????????100?????0010011->100000011101100101000?????00000010000000\n?????????????????100?????0101011->101000000001???100000?????00000010000000\n0000000??????????100?????0110011->100000111001???101000?????00000010000000\n?????????????????100?????1011011->101000000001???100000?????00000010000000\n?????????????????100?????1100011->100100111001001111000?????00000000000000\n?????????????????100?????1111011->101000000001???100000?????00000010000000\n?????????????????101?????0000011->1000000111011001000010000000000010000000\n000000???????????101?????0010011->100000011101100101010?????00000010000000\n0000000??????????101?????0011011->100000011101100001010?????00000010000000\n0000000??????????101?????0110011->100000111001???101010?????00000010000000\n0000000??????????101?????0111011->100000111001???001010?????00000010000000\n?????????????????101?????1100011->100100111001001111010?????00000000000000\n?????????????????101?????1110011->100000001100101100000?????00000011010000\n?????????????????110?????0000011->1000000111011001000010000000000010000000\n?????????????????110?????0001011->101000010001???100000?????00000010000000\n?????????????????110?????0010011->100000011101100101100?????00000010000000\n?????????????????110?????0101011->101000010001???100000?????00000010000000\n0000000??????????110?????0110011->100000111001???101100?????00000010000000\n?????????????????110?????1011011->101000010001???100000?????00000010000000\n?????????????????110?????1100011->100100111001001111100?????00000000000000\n?????????????????110?????1110011->100000001100101100000?????00000011100000\n?????????????????110?????1111011->101000010001???100000?????00000010000000\n?????????????????111?????0001011->101000110001???100000?????00000010000000\n?????????????????111?????0010011->100000011101100101110?????00000010000000\n?????????????????111?????0101011->101000110001???100000?????00000010000000\n0000000??????????111?????0110011->100000111001???101110?????00000010000000\n?????????????????111?????1011011->101000110001???100000?????00000010000000\n?????????????????111?????1100011->100100111001001111110?????00000000000000\n?????????????????111?????1110011->100000001100101100000?????00000011110000\n?????????????????111?????1111011->101000110001???100000?????00000010000000\n00000000000100000000000001110011->1000000?????????????0?????00000001000000\n0000001??????????000?????0110011->100000111001???100000?????00000110000000\n0000001??????????000?????0111011->100000111001???000000?????00000110000000\n?????01??????????????????1000011->11000000????????????0?????11110000000001\n?????01??????????????????1000111->11000000????????????0?????11110000000001\n?????01??????????????????1001011->11000000????????????0?????11110000000001\n?????01??????????????????1001111->11000000????????????0?????11110000000001\n0000001??????????????????1010011->11000000????????????0?????11010000000001\n0000001??????????001?????0110011->100000111001???100010?????00000110000000\n0000001??????????010?????0110011->100000111001???100100?????00000110000000\n0000001??????????011?????0110011->100000111001???100110?????00000110000000\n0000001??????????100?????0110011->100000111001???101000?????00000110000000\n0000001??????????100?????0111011->100000111001???001000?????00000110000000\n0000001??????????101?????0110011->100000111001???101010?????00000110000000\n0000001??????????101?????0111011->100000111001???001010?????00000110000000\n0000001??????????110?????0110011->100000111001???101100?????00000110000000\n0000001??????????110?????0111011->100000111001???001100?????00000110000000\n0000001??????????111?????0110011->100000111001???101110?????00000110000000\n0000001??????????111?????0111011->100000111001???001110?????00000110000000\n0000100??????????????????1010011->11000000????????????0?????11010000000000\n00001????????????010?????0101111->100000110001???1000010010000000010000010\n00001????????????011?????0101111->100000110001???1000010010000000010000010\n0000101??????????????????1010011->11000000????????????0?????11010000000001\n0001000??????????????????1010011->11000000????????????0?????11010000000000\n00010??00000?????010?????0101111->100000110001???1000010011000000010000010\n00010??00000?????011?????0101111->100000110001???1000010011000000010000010\n00010000001000000000000001110011->1000000?????????????0?????00000001000000\n00010000010100000000000001110011->1000000?????????????0?????00000001000000\n0001001??????????????????1010011->11000000????????????0?????11010000000001\n0001001??????????000000001110011->100000110001???1000011010000000001000000\n0001100??????????????????1010011->11000000????????????0?????11010000000000\n00011????????????010?????0101111->100000110001???1000010011100000010000010\n00011????????????011?????0101111->100000110001???1000010011100000010000010\n0001101??????????????????1010011->11000000????????????0?????11010000000001\n0010000??????????000?????1010011->11000000????????????0?????11010000000000\n0010000??????????001?????1010011->11000000????????????0?????11010000000000\n00100????????????010?????0101111->100000110001???1000010100100000010000010\n0010000??????????010?????1010011->11000000????????????0?????11010000000000\n00100????????????011?????0101111->100000110001???1000010100100000010000010\n0010001??????????000?????1010011->11000000????????????0?????11010000000001\n0010001??????????001?????1010011->11000000????????????0?????11010000000001\n0010001??????????010?????1010011->11000000????????????0?????11010000000001\n0010100??????????000?????1010011->11000000????????????0?????11010000000000\n0010100??????????001?????1010011->11000000????????????0?????11010000000000\n0010101??????????000?????1010011->11000000????????????0?????11010000000001\n0010101??????????001?????1010011->11000000????????????0?????11010000000001\n00110000001000000000000001110011->1000000?????????????0?????00000001000000\n00110000010100000000000001110011->1000000?????????????0?????00000001000000\n0100000??????????000?????0110011->100000111001???110100?????00000010000000\n0100000??????????000?????0111011->100000111001???010100?????00000010000000\n01000????????????010?????0101111->100000110001???1000010101000000010000010\n01000????????????011?????0101111->100000110001???1000010101000000010000010\n010000???????????101?????0010011->100000011101100110110?????00000010000000\n0100000??????????101?????0011011->100000011101100010110?????00000010000000\n0100000??????????101?????0110011->100000111001???110110?????00000010000000\n0100000??????????101?????0111011->100000111001???010110?????00000010000000\n010000000001?????????????1010011->11000000????????????0?????10010000000001\n010000100000?????????????1010011->11000000????????????0?????10010000000001\n010110000000?????????????1010011->11000000????????????0?????11010000000000\n010110100000?????????????1010011->11000000????????????0?????11010000000001\n01100????????????010?????0101111->100000110001???1000010101100000010000010\n01100????????????011?????0101111->100000110001???1000010101100000010000010\n01111011001000000000000001110011->1000000?????????????0?????00000001000000\n10000????????????010?????0101111->100000110001???1000010110000000010000010\n10000????????????011?????0101111->100000110001???1000010110000000010000010\n1010000??????????000?????1010011->11000000????????????0?????11000010000000\n1010000??????????001?????1010011->11000000????????????0?????11000010000000\n10100????????????010?????0101111->100000110001???1000010110100000010000010\n1010000??????????010?????1010011->11000000????????????0?????11000010000000\n10100????????????011?????0101111->100000110001???1000010110100000010000010\n1010001??????????000?????1010011->11000000????????????0?????11000010000001\n1010001??????????001?????1010011->11000000????????????0?????11000010000001\n1010001??????????010?????1010011->11000000????????????0?????11000010000001\n110000000000?????????????1010011->11000000????????????0?????10000010000000\n11000????????????010?????0101111->100000110001???1000010111000000010000010\n11000????????????011?????0101111->100000110001???1000010111000000010000010\n110000000001?????????????1010011->11000000????????????0?????10000010000000\n110000000010?????????????1010011->11000000????????????0?????10000010000000\n110000000011?????????????1010011->11000000????????????0?????10000010000000\n110000100000?????????????1010011->11000000????????????0?????10000010000001\n110000100001?????????????1010011->11000000????????????0?????10000010000001\n110000100010?????????????1010011->11000000????????????0?????10000010000001\n110000100011?????????????1010011->11000000????????????0?????10000010000001\n110100000000?????????????1010011->11000001??01????????0?????00010000000000\n110100000001?????????????1010011->11000001??01????????0?????00010000000000\n110100000010?????????????1010011->11000001??01????????0?????00010000000000\n110100000011?????????????1010011->11000001??01????????0?????00010000000000\n110100100000?????????????1010011->11000001??01????????0?????00010000000001\n110100100001?????????????1010011->11000001??01????????0?????00010000000001\n110100100010?????????????1010011->11000001??01????????0?????00010000000001\n110100100011?????????????1010011->11000001??01????????0?????00010000000001\n111000000000?????000?????1010011->11000000????????????0?????10000010000000\n111000000000?????001?????1010011->11000000????????????0?????10000010000000\n11100????????????010?????0101111->100000110001???1000010111100000010000010\n11100????????????011?????0101111->100000110001???1000010111100000010000010\n111000100000?????000?????1010011->11000000????????????0?????10000010000001\n111000100000?????001?????1010011->11000000????????????0?????10000010000001\n111100000000?????000?????1010011->11000001??01????????0?????00010000000000\n111100100000?????000?????1010011->11000001??01????????0?????00010000000001\n                                  0???????????????????0???????????????????",
    "minimizedTable": "???????????????????0?????00?0011->1??????111?11??1????????????????1???????\n???????????????????0?????0000011->????????????????????1???????????????????\n??????????????????0??????0000011->1??????111?11??1????1???????????1???????\n?????????????????0???????0?00011->1??????111?1???1????1???????????????????\n?????????????????0???????0000011->????????????????????????????????1???????\n?????????????????000?????00??011->1??????????1????????????????????????????\n???????????????????0?????0?01011->1?1????????1???1????????????????????????\n?????????????????00??????0001111->1????????????????????????????????????1??\n?????????????????000?????001?011->???????111??1???????????????????1???????\n?????????????????????????0?10111->1???????11???1?1????????????????1???????\n?????????????????????????0010111->??????????1?????????????????????????????\n?????????????????0???????0100011->??????1??????????????????1??????????????\n?????????????????00???????100011->??????1?????????????????????????????????\n0?00000??????????000?????011?011->1?????111??1????????????????????1???????\n0?00000??????????000?????0110011->???????????????1????????????????????????\n000000???????????????????0110011->1?????111??1???1????????????????1???????\n000000???????????000?????011?011->1?????111??1????????????????????1???????\n0000000??????????00??????011?011->??????1?????????????????????????????????\n?????????????????????????100??11->?1????????????????????????1111??????????\n?????0???????????????????100??11->1???????????????????????????????????????\n000??0???????????????????1010011->11????????????????????????11?1??????????\n???????????????????0?????1?11011->1?1????????1???1????????????????????????\n??????????????????0??????1100011->???1????1?????1?????????????????????????\n?????????????????00??????1100011->??????????????????1?????????????????????\n?????????????????000?????1100?11->1??????11??1???1????????????????????????\n?????????????????000?????1100111->?????1???1??1???????????????????1???????\n?????????????????????????1101111->1???1????11??111????????????????1???????\n00000000000?00000000000001110??1->?????????????????????????????????1??????\n00000000000?00000000000001110011->1???????????????????????????????????????\n?????????????????001?????0001111->????????????????????????????????????1???\n000000????????????01?????0?10011->1??????11??1???1???1????????????1???????\n000000????????????01?????0010011->?????????1??1???????????????????????????\n0000000???????????01?????0?11011->1??????11??1???????1????????????1???????\n0000000???????????01?????0011011->?????????1??1???????????????????????????\n??????????????????01?????11?0011->1??????????????1????????????????????????\n??????????????????01?????1100011->???????????????????1????????????????????\n?????????????????001?????11?0011->???????1???1????????????????????????????\n???????????????????1?????1110011->????????????????????????????????11?1????\n?????????????????01??????0?00?11->1??????111?1???1????1???????????????????\n?????????????????01??????0000?11->????????????1???????????????????????????\n?????????????????01??????0?00111->?1??????????????????????????????????????\n?????????????????01??????0000111->?????????????????????????????1??????????\n??????????????????1??????0?01011->1?1????1???1???1????????????????????????\n??????????????????1??????0010011->1??????111?11??1?1??????????????1???????\n?????????????????01??????0010011->????????????????1???????????????????????\n?????????????????01??????0100?11->?????????????????????????1??????????????\n?????????????????01??????0100111->???????????????????????????1????????????\n???00????????????01??????0101111->1?????11???1???1????1?1?????????1?????1?\n0000000???????????1??????0110011->?????????????????1??????????????????????\n0000000??????????01??????0110011->????????????????1???????????????????????\n??????????????????1??????1?11011->1?1????1???1???1????????????????????????\n??????????????????1??????111?011->1??????????????1????????????????????????\n??????????????????1??????1110011->????????????????????????????????111?????\n?????????????????01??????111?011->???????1???1????????????????????????????\n?????????????????011?????0?00111->???????????????????????????????????????1\n??????????????????11?????0?01011->??????1?????????????????????????????????\n??????????????????11?????0010011->??????????????????1?????????????????????\n000000????????????11?????0110011->??????????????????1?????????????????????\n??????????????????11?????1?11011->??????1?????????????????????????????????\n?????????????????1?0?????0?01011->????????????????????????????????1???????\n?????????????????1?0?????0010011->?????????????????1??????????????????????\n000000???????????1???????0110011->?????????????????1??????????????????????\n?????????????????1?0?????1?11011->????????????????????????????????1???????\n?????????????????1???????1100011->1??1??11???1???111??????????????????????\n0?0000???????????101?????0010011->1??????111?11??1???1????????????1???????\n000000???????????101?????0?10011->?????????????????1??????????????????????\n0?00000??????????101?????0?11011->1??????11??1???????1????????????1???????\n0?00000??????????101?????0011011->?????????1??1???????????????????????????\n0000000??????????101?????0?11011->?????????????????1??????????????????????\n0?00000??????????101?????011?011->1?????111??1???????1????????????1???????\n0?00000??????????101?????0110011->???????????????1????????????????????????\n000000???????????1?1?????0110011->???????????????????1????????????????????\n?????????????????1?1?????11?0011->????????1?????1?????????????????????????\n?????????????????1?1?????1100011->???????????????????1????????????????????\n?????????????????1?1?????1110011->?????????1??1???????????????????????????\n?????????????????11??????0?01011->????????????????????????????????1???????\n?????????????????11??????0010011->??????????????????1?????????????????????\n000000???????????11??????0110011->??????????????????1?????????????????????\n?????????????????11??????1?11011->????????????????????????????????1???????\n?????????????????11??????11?0011->????????1?????1?????????????????????????\n?????????????????11??????1100011->??????????????????1?????????????????????\n?????????????????11??????1110011->?????????1??1???????????????????????????\n?????????????????111?????0010011->???????????????????1????????????????????\n0000001??????????????????0110011->???????????????????????????????1????????\n0000001???????????00?????011?011->???????????????????????????????1????????\n?????01??????????????????100??11->???????????????????????????????????????1\n000??01??????????????????1010011->???????????????????????????????????????1\n0000001????????????1?????0110011->???????????????????1????????????????????\n0000001???????????1??????0110011->??????????????????1?????????????????????\n0000001??????????1???????011?011->1?????111??1?????1?????????????11???????\n0000001??????????1?1?????011?011->???????????????????1????????????????????\n0000001??????????11??????011?011->??????????????????1?????????????????????\n000?1????????????01??????0101111->1?????11???1???1????1??1????????1?????1?\n00010??00000?????????????0101111->??????11???1???1???????11???????1?????1?\n00010??00000?????01??????0101111->1???????????????????1???????????????????\n00?10000001000000000000001110??1->?????????????????????????????????1??????\n00?10000001000000000000001110011->1???????????????????????????????????????\n00?10000010100000000000001110??1->?????????????????????????????????1??????\n00?10000010100000000000001110011->1???????????????????????????????????????\n0001001???????????????0001110011->???????????????1?????1?1?????????1??????\n0001001??????????0????0001110011->???????1???1????????????????????????????\n0001001??????????000??0001110011->??????1?????????????????????????????????\n0001001??????????000000001110011->1???????????????????1???????????????????\n00011????????????01??????0101111->????????????????????????11??????????????\n?01000???????????0?0?????1010011->11????????????????????????11????????????\n?01000???????????00??????1010011->11????????????????????????11????????????\n0010?0???????????00??????1010011->11????????????????????????11?1??????????\n001000???????????0?0?????1010011->?????????????????????????????1??????????\n??100????????????01??????0101111->?????????????????????????1??????????????\n?010001??????????0?0?????1010011->???????????????????????????????????????1\n?010001??????????00??????1010011->???????????????????????????????????????1\n0010?01??????????00??????1010011->???????????????????????????????????????1\n0100000??????????000?????011?011->????????????????1?1?????????????????????\n?1?00????????????01??????0101111->????????????????????????1???????????????\n010000???????????101?????0010011->????????????????1?1?????????????????????\n0100000??????????101?????0?11011->????????????????1?1?????????????????????\n0100000??????????101?????011?011->????????????????1?1?????????????????????\n?10000000001?????????????1010011->11????????????????????????1?????????????\n010000000001?????????????1010011->?????????????????????????????1?????????1\n?10000100000?????????????1010011->11????????????????????????1????????????1\n010000100000?????????????1010011->?????????????????????????????1??????????\n010110?00000?????????????1010011->11????????????????????????11?1??????????\n010110100000?????????????1010011->???????????????????????????????????????1\n01111011001000000000000001110???->?????????????????????????????????1??????\n01111011001000000000000001110011->1???????????????????????????????????????\n1??00????????????01??????0101111->???????????????????????1????????????????\n101000???????????0?0?????1010011->????????????????????????????????1???????\n101000???????????00??????1010011->????????????????????????????????1???????\n11??00?00000?????????????1010011->?1??????????????????????????????????????\n110?00?000???????????????1010011->11??????????????????????????????????????\n110000?000???????????????1010011->??????????????????????????1?????1???????\n110?001000???????????????1010011->???????????????????????????????????????1\n110100?000???????????????1010011->???????1???1?????????????????1??????????\n111?00?00000?????000?????1010011->1???????????????????????????????????????\n111000?00000?????00??????1010011->1?????????????????????????1?????1???????\n111?00100000?????000?????1010011->???????????????????????????????????????1\n111000100000?????00??????1010011->???????????????????????????????????????1\n111100?00000?????000?????1010011->???????1???1?????????????????1??????????\n                                  0???????????????????0???????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>decoded_decoded",
    "truthTable": "000000000001->000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000010->000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000011->000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000100000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000\n000100000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000\n000100000101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000\n000100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\n000100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000\n000101000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000\n000101000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000\n000101000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000\n000101000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000\n000101000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000\n000110000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000\n001100000000->000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000001->000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000\n001100000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000\n001100000100->000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000101->000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000\n001100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000\n001100100000->000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100011->000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100100->000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100101->000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100110->000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100111->000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101000->000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101001->000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101010->000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101011->000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101100->000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101101->000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101110->000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101111->000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110000->000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110001->000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110010->000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110011->000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110100->000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110101->000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000\n001100110110->000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000\n001100110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000\n001100111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000\n001100111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000\n001100111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000\n001100111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000\n001100111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000\n001100111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000\n001100111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000\n001100111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000\n001101000000->000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000001->000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000010->000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000011->000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000100->000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001110100000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000\n001110100010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000\n001110110000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000\n001110110001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000\n001110110010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000\n001110110011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000\n001110110100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000\n001110110101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000\n001110110110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000\n001110110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000\n001110111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000\n001110111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000\n001110111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000\n001110111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000\n001110111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000\n001110111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000\n001110111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000\n001110111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000\n011110100000->100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100001->010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100010->001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100011->000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110000->000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110001->000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110010->000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011111000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000\n101100000000->000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000010->000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000011->000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000100->000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000101->000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000110->000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000111->000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001000->000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001001->000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001010->000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001011->000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001100->000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001101->000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001110->000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001111->000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010000->000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010001->000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010010->000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010011->000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010100->000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000\n101100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000\n101100010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000\n101100010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000\n101100011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000\n101100011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000\n101100011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000\n101100011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000\n101100011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000\n101100011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000\n101100011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000\n101100011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000\n110000000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000\n110000000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000\n110000000011->000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000100->000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000101->000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000110->000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000111->000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001000->000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001001->000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001010->000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001011->000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001100->000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001101->000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001110->000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001111->000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010000->000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010001->000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010010->000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010011->000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010100->000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000\n110000010101->000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000\n110000010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000\n110000010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000\n110000011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000\n110000011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000\n110000011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000\n110000011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000\n110000011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000\n110000011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000\n110000011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000\n110000011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000\n111100010001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100\n111100010010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000\n111100010011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010\n111100010100->000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n111100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
    "minimizedTable": "00000000000?->?????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000010->??????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000011->???????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0001000000??->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????\n000100000100->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????\n000100000101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????\n00010000011?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????\n000100001???->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????\n000101000000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????\n000101000001->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????\n000101000010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????\n000101000011->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????\n0001010001??->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????\n00011???????->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????\n001100000000->?????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000001->????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000010->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????\n001100000011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????\n001100000100->????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000101->??????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110000011?->??????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????\n001100001???->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????\n00110010000?->????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110010001?->???????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100100->??????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100101->?????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100110->????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100111->???????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101000->??????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101001->?????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101010->????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101011->???????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101100->??????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????\n001100101101->?????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????\n001100101110->????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????\n001100101111->???????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????\n001100110000->??????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????\n001100110001->?????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????\n001100110010->????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????\n001100110011->???????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????\n001100110100->??????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????\n001100110101->?????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????\n001100110110->????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????\n001100110111->???????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????\n001100111000->??????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????\n001100111001->?????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????\n001100111010->????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????\n001100111011->???????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????\n001100111100->??????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????\n001100111101->?????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????\n001100111110->????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????\n001100111111->???????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????\n001101000000->?????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000001->??????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000010->????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000011->???????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0011010001??->???????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00111010000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????\n00111010001?->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????\n001110110000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????\n001110110001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????\n001110110010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????\n001110110011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????\n001110110100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????\n001110110101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????\n001110110110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????\n001110110111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????\n001110111000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????\n001110111001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????\n001110111010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????\n001110111011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????\n001110111100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????\n001110111101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????\n001110111110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????\n001110111111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????\n011110100000->1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100001->?1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100010->??1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100011->???1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110000->??????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110001->???????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n01111011001?->????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011111??????->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????\n10110000000?->?????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000010->??????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000011->????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000100->???????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000101->??????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000110->?????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000111->????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001000->???????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001001->??????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001010->?????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001011->????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001100->???????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????\n101100001101->??????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????\n101100001110->?????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????\n101100001111->????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????\n101100010000->???????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????\n101100010001->??????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????\n101100010010->?????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????\n101100010011->????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????\n101100010100->???????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????\n101100010101->??????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????\n101100010110->?????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????\n101100010111->????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????\n101100011000->???????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????\n101100011001->??????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????\n101100011010->?????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????\n101100011011->????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????\n101100011100->???????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????\n101100011101->??????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????\n101100011110->?????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????\n101100011111->????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????\n11000000000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????\n110000000010->????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????\n110000000011->?????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000100->????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000101->???????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000110->??????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000111->?????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001000->????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001001->???????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001010->??????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001011->?????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001100->????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????\n110000001101->???????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????\n110000001110->??????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????\n110000001111->?????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????\n110000010000->????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????\n110000010001->???????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????\n110000010010->??????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????\n110000010011->?????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????\n110000010100->????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????\n110000010101->???????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????\n110000010110->??????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????\n110000010111->?????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????\n110000011000->????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????\n110000011001->???????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????\n110000011010->??????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????\n110000011011->?????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????\n110000011100->????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????\n110000011101->???????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????\n110000011110->??????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????\n110000011111->?????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????\n11110001000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??\n111100010010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???\n111100010011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?\n111100010100->?????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n111100010101->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>decoded",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>decoded_150",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>io_decode_0_fp_csr_plaOutput",
    "truthTable": "000000000001->1\n000000000010->1\n000000000011->1\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "0000????????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>io_decode_0_read_illegal_plaOutput",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->1\n011110110001->1\n011110110010->1\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "01111011????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_1>io_decode_0_read_illegal_plaOutput_1",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "????????????->0\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|MulDiv_1>decoded",
    "truthTable": "000->10??\n001->1111\n010->1110\n011->1100\n100->0011\n101->0000\n110->0111\n111->0100\n     ????",
    "minimizedTable": "??0->??1?\n0??->1???\n00?->??11\n0?1->?1??\n?1?->?1??\n1?0->???1\n     ????"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|Rocket_1>io.dmem"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_99",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q_full_counter"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[0].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[1].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[2].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[3].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[4].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[5].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[6].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[7].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[8].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[9].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[10].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[0].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[1].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[2].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[3].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[4].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[5].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[6].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[7].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[8].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[9].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>q[10].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|Queue_157>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|counter_losuan>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|counter_losuan_1>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|counter_losuan_2>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|counter_losuan_3>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|counter_losuan_4>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_1>num_ls"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|shadow_stack>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|shadow>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|rowhammer>io"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain_1.auto.rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain_1"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.FixedClockBroadcast_7"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_100",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_101",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.TilePRCIDomain_1.auto.element_reset_domain_rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_102",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_103",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_104",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_105",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_16"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_17"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_18"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_19"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_20"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_16"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_2>io.cpu.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_2>io.cpu.s1_data"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_4>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_4>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_4>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_4>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_2.array_0_0",
    "address_width": 9,
    "name": "array_0_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_2.array_1_0",
    "address_width": 9,
    "name": "array_1_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_2.array_2_0",
    "address_width": 9,
    "name": "array_2_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.DataArray_2.array_3_0",
    "address_width": 9,
    "name": "array_3_0",
    "data_width": 64,
    "depth": 512,
    "description": "Non-blocking DCache Data Array",
    "write_mask_granularity": 64
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_4>io.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|NonBlockingDCache_2>s1_xcpt_valid"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_4"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_4>fifo_addr"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_5"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_5>fifo_addr"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.asan_rocc_6"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>lors_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>state"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>can_use_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>uaf_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>overflow_r"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|asan_rocc_6>fifo_addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ICache_2>s1_hit"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_2.tag_array",
    "address_width": 6,
    "name": "tag_array",
    "data_width": 84,
    "depth": 64,
    "description": "ICache Tag Array",
    "write_mask_granularity": 21
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_2.data_arrays_0",
    "address_width": 9,
    "name": "data_arrays_0",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.ICache_2.data_arrays_1",
    "address_width": 9,
    "name": "data_arrays_1",
    "data_width": 128,
    "depth": 512,
    "description": "ICache Data Array",
    "write_mask_granularity": 32
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_5>io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_5>ae_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_5>pr_array"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|TLB_5>ae_ld_array"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB_2",
    "paramsClassName": "freechips.rocketchip.rocket.BTBParams",
    "params": {
      "nPages": 6,
      "nMatchBits": 14,
      "nRAS": 6,
      "updatesOutOfOrder": false,
      "nEntries": 28,
      "bhtParams": {
        "nEntries": 512,
        "counterLength": 1,
        "historyLength": 8,
        "historyBits": 3
      }
    }
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.BTB_2",
    "paramsClassName": "freechips.rocketchip.rocket.BHTParams",
    "params": {
      "nEntries": 512,
      "counterLength": 1,
      "historyLength": 8,
      "historyBits": 3
    }
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_17"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLWidthWidget_18"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_18"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_19"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile_2.traceCoreSourceNodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.RocketTile_2.auto.trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|FPUDecoder_2>decoder_decoded",
    "truthTable": "?????00??????????????????1000011->011110000000001001\n?????00??????????????????1000111->011110000000001001\n?????00??????????????????1001011->011110000000001001\n?????00??????????????????1001111->011110000000001001\n0000000??????????????????1010011->011100100000001001\n?????????????????010?????0000111->11000??????0000000\n?????????????????010?????0100111->100101?01000100000\n?????????????????011?????0000111->11000??????0000000\n?????????????????011?????0100111->100101?01010100000\n?????01??????????????????1000011->011110001010001001\n?????01??????????????????1000111->011110001010001001\n?????01??????????????????1001011->011110001010001001\n?????01??????????????????1001111->011110001010001001\n0000001??????????????????1010011->011100101010001001\n0000100??????????????????1010011->011100100000001001\n0000101??????????????????1010011->011100101010001001\n0001000??????????????????1010011->011100000000001001\n0001001??????????????????1010011->011100001010001001\n0001100??????????????????1010011->011100000000000101\n0001101??????????????????1010011->011100001010000101\n0010000??????????000?????1010011->011100000000010000\n0010000??????????001?????1010011->011100000000010000\n0010000??????????010?????1010011->011100000000010000\n0010001??????????000?????1010011->011100001010010000\n0010001??????????001?????1010011->011100001010010000\n0010001??????????010?????1010011->011100001010010000\n0010100??????????000?????1010011->011100000000010001\n0010100??????????001?????1010011->011100000000010001\n0010101??????????000?????1010011->011100001010010001\n0010101??????????001?????1010011->011100001010010001\n010000000001?????????????1010011->011000?01000010001\n010000100000?????????????1010011->011000?00010010001\n010110000000?????????????1010011->011000?00000000011\n010110100000?????????????1010011->011000?01010000011\n1010000??????????000?????1010011->001100000000100001\n1010000??????????001?????1010011->001100000000100001\n1010000??????????010?????1010011->001100000000100001\n1010001??????????000?????1010011->001100001010100001\n1010001??????????001?????1010011->001100001010100001\n1010001??????????010?????1010011->001100001010100001\n110000000000?????????????1010011->001000?00??0100001\n110000000001?????????????1010011->001000?00??0100001\n110000000010?????????????1010011->001000?00??0100001\n110000000011?????????????1010011->001000?00??0100001\n110000100000?????????????1010011->001000?01??0100001\n110000100001?????????????1010011->001000?01??0100001\n110000100010?????????????1010011->001000?01??0100001\n110000100011?????????????1010011->001000?01??0100001\n110100000000?????????????1010011->01000??00001000001\n110100000001?????????????1010011->01000??00001000001\n110100000010?????????????1010011->01000??00001000001\n110100000011?????????????1010011->01000??00001000001\n110100100000?????????????1010011->01000??01011000001\n110100100001?????????????1010011->01000??01011000001\n110100100010?????????????1010011->01000??01011000001\n110100100011?????????????1010011->01000??01011000001\n111000000000?????000?????1010011->001000?01000100000\n111000000000?????001?????1010011->001000?00000100000\n111000100000?????000?????1010011->001000?01010100000\n111000100000?????001?????1010011->001000?01010100000\n111100000000?????000?????1010011->01000??00011000000\n111100100000?????000?????1010011->01000??01011000000\n                                  ??????????????????",
    "minimizedTable": "?????????????????????????100??11->?1111?????????1??1\n000??0???????????????????1010011->?111?????????????1\n000?00???????????????????1010011->??????????????1???\n0000?0???????????????????1010011->??????1???????1???\n?????????????????01??????0?00111->1?????????????????\n?????????????????01??????0000111->?1????????????????\n?????????????????01??????0100111->???1?1??1???1?????\n?????????????????011?????0100111->??????????1???????\n?????01??????????????????100??11->????????1?1???????\n000??01??????????????????1010011->????????1?1???????\n000110???????????????????1010011->???????????????1??\n?01000???????????0?0?????1010011->??11??????????????\n?01000???????????00??????1010011->??11??????????????\n0010?0???????????00??????1010011->?111?????????1????\n001000???????????0?0?????1010011->?1???????????1????\n?010001??????????0?0?????1010011->????????1?1???????\n?010001??????????00??????1010011->????????1?1???????\n0010?01??????????00??????1010011->????????1?1???????\n001010???????????00??????1010011->?????????????????1\n?10000000001?????????????1010011->??1??????????????1\n010000000001?????????????1010011->?1??????1????1????\n?10000100000?????????????1010011->??1??????????????1\n010000100000?????????????1010011->?1????????1??1????\n010110?00000?????????????1010011->?11?????????????11\n010110100000?????????????1010011->????????1?1???????\n101000???????????0?0?????1010011->????????????1????1\n101000???????????00??????1010011->????????????1????1\n110?00?000???????????????1010011->?????????????????1\n110000?000???????????????1010011->??1?????????1?????\n110?001000???????????????1010011->????????1?????????\n110100?000???????????????1010011->?1?????????1??????\n1101001000???????????????1010011->??????????1???????\n111000?00000?????00??????1010011->??1?????????1?????\n111000?00000?????000?????1010011->????????1?????????\n111?00100000?????000?????1010011->????????1?????????\n111000100000?????00??????1010011->????????1?1???????\n111100?00000?????000?????1010011->?1????????11??????\n                                  ??????????????????"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe_4"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToInt_2"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.IntToFP_2"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPToFP_2"
  },
  {
    "class": "freechips.rocketchip.util.RetimeModuleAnnotation",
    "target": "TestHarness.FPUFMAPipe_5"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.RocketTile_2",
    "paramsClassName": "freechips.rocketchip.tile.RocketTileParams",
    "params": {
      "dataScratchpadBytes": 0,
      "btb": {
        "nEntries": 28,
        "nMatchBits": 14,
        "nPages": 6,
        "nRAS": 6,
        "bhtParams": {
          "nEntries": 512,
          "counterLength": 1,
          "historyLength": 8,
          "historyBits": 3
        },
        "updatesOutOfOrder": false
      },
      "icache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "cacheIdBits": 0,
        "prefetch": false,
        "blockBytes": 64,
        "latency": 2,
        "fetchBytes": 4
      },
      "tileId": 2,
      "core": {
        "bootFreqHz": 0,
        "useVM": true,
        "useUser": false,
        "useSupervisor": false,
        "useHypervisor": false,
        "useDebug": true,
        "useAtomics": true,
        "useAtomicsOnlyForIO": false,
        "useCompressed": true,
        "useRVE": false,
        "useConditionalZero": false,
        "nLocalInterrupts": 0,
        "useNMI": false,
        "nBreakpoints": 1,
        "useBPWatch": false,
        "mcontextWidth": 0,
        "scontextWidth": 0,
        "nPMPs": 8,
        "nPerfCounters": 0,
        "haveBasicCounters": true,
        "haveCFlush": false,
        "misaWritable": true,
        "nL2TLBEntries": 0,
        "nL2TLBWays": 1,
        "nPTECacheEntries": 8,
        "mtvecInit": 0,
        "mtvecWritable": true,
        "fastLoadWord": true,
        "fastLoadByte": false,
        "branchPredictionModeCSR": false,
        "clockGate": false,
        "mvendorid": 0,
        "mimpid": 538447876,
        "mulDiv": {
          "mulUnroll": 8,
          "divUnroll": 1,
          "mulEarlyOut": true,
          "divEarlyOut": true,
          "divEarlyOutGranularity": 1
        },
        "fpu": {
          "minFLen": 32,
          "fLen": 64,
          "divSqrt": true,
          "sfmaLatency": 3,
          "dfmaLatency": 4
        },
        "debugROB": false,
        "haveCease": true,
        "haveSimTimeout": true
      },
      "dcache": {
        "nSets": 64,
        "nWays": 4,
        "rowBits": 64,
        "replacementPolicy": "random",
        "nTLBSets": 1,
        "nTLBWays": 32,
        "nTLBBasePageSectors": 4,
        "nTLBSuperpages": 4,
        "dataECCBytes": 1,
        "nMSHRs": 16,
        "nSDQ": 17,
        "nRPQ": 16,
        "nMMIOs": 1,
        "blockBytes": 64,
        "separateUncachedResp": false,
        "acquireBeforeRelease": false,
        "pipelineWayMux": false,
        "clockGate": false
      },
      "clockSinkParams": {
        "phaseDeg": 0.0,
        "phaseErrorDeg": 5.0,
        "freqErrorPPM": 10000.0,
        "jitterPS": 200.0
      }
    }
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|Rocket_2>id_ctrl_decoder_decoded",
    "truthTable": "?????????????????000?????0000011->1000000111011001000010000000000010000000\n?????????????????000?????0001011->101000000001???100000?????00000000000000\n?????????????????000?????0001111->10000000????????????0?????00000000000100\n?????????????????000?????0010011->100000011101100100000?????00000010000000\n?????????????????????????0010111->100000001110010100000?????00000010000000\n?????????????????000?????0011011->100000011101100000000?????00000010000000\n?????????????????000?????0100011->1000001111010001000010000100000000000000\n?????????????????000?????0101011->101000000001???100000?????00000000000000\n0000000??????????000?????0110011->100000111001???100000?????00000010000000\n?????????????????????????0110111->100000001100010100000?????00000010000000\n0000000??????????000?????0111011->100000111001???000000?????00000010000000\n?????00??????????????????1000011->11000000????????????0?????11110000000000\n?????00??????????????????1000111->11000000????????????0?????11110000000000\n?????00??????????????????1001011->11000000????????????0?????11110000000000\n?????00??????????????????1001111->11000000????????????0?????11110000000000\n0000000??????????????????1010011->11000000????????????0?????11010000000000\n?????????????????000?????1011011->101000000001???100000?????00000000000000\n?????????????????000?????1100011->100100111001001100100?????00000000000000\n?????????????????000?????1100111->100001011101100100000?????00000010000000\n?????????????????????????1101111->100010000110011100000?????00000010000000\n00000000000000000000000001110011->1000000?????????????0?????00000001000000\n?????????????????000?????1111011->101000000001???100000?????00000000000000\n?????????????????001?????0000011->1000000111011001000010000000000010000000\n?????????????????001?????0001111->10000000????????????0?????00000000001100\n000000???????????001?????0010011->100000011101100100010?????00000010000000\n0000000??????????001?????0011011->100000011101100000010?????00000010000000\n?????????????????001?????0100011->1000001111010001000010000100000000000000\n0000000??????????001?????0110011->100000111001???100010?????00000010000000\n0000000??????????001?????0111011->100000111001???000010?????00000010000000\n?????????????????001?????1100011->100100111001001100110?????00000000000000\n?????????????????001?????1110011->100000010001???100000?????00000011010000\n?????????????????010?????0000011->1000000111011001000010000000000010000000\n?????????????????010?????0000111->1100000111011001000010000000010000000000\n?????????????????010?????0001011->101000010001???100000?????00000000000000\n?????????????????010?????0010011->100000011101100111000?????00000010000000\n?????????????????010?????0100011->1000001111010001000010000100000000000000\n?????????????????010?????0100111->1100000111010001000010000101000000000000\n?????????????????010?????0101011->101000010001???100000?????00000000000000\n00000????????????010?????0101111->100000110001???1000010100000000010000010\n0000000??????????010?????0110011->100000111001???111000?????00000010000000\n?????????????????010?????1011011->101000010001???100000?????00000000000000\n?????????????????010?????1110011->100000010001???100000?????00000011100000\n?????????????????010?????1111011->101000010001???100000?????00000000000000\n?????????????????011?????0000011->1000000111011001000010000000000010000000\n?????????????????011?????0000111->1100000111011001000010000000010000000001\n?????????????????011?????0001011->101000110001???100000?????00000000000000\n?????????????????011?????0010011->100000011101100111100?????00000010000000\n?????????????????011?????0100011->1000001111010001000010000100000000000000\n?????????????????011?????0100111->1100000111010001000010000101000000000001\n?????????????????011?????0101011->101000110001???100000?????00000000000000\n00000????????????011?????0101111->100000110001???1000010100000000010000010\n0000000??????????011?????0110011->100000111001???111100?????00000010000000\n?????????????????011?????1011011->101000110001???100000?????00000000000000\n?????????????????011?????1110011->100000010001???100000?????00000011110000\n?????????????????011?????1111011->101000110001???100000?????00000000000000\n?????????????????100?????0000011->1000000111011001000010000000000010000000\n?????????????????100?????0001011->101000000001???100000?????00000010000000\n?????????????????100?????0010011->100000011101100101000?????00000010000000\n?????????????????100?????0101011->101000000001???100000?????00000010000000\n0000000??????????100?????0110011->100000111001???101000?????00000010000000\n?????????????????100?????1011011->101000000001???100000?????00000010000000\n?????????????????100?????1100011->100100111001001111000?????00000000000000\n?????????????????100?????1111011->101000000001???100000?????00000010000000\n?????????????????101?????0000011->1000000111011001000010000000000010000000\n000000???????????101?????0010011->100000011101100101010?????00000010000000\n0000000??????????101?????0011011->100000011101100001010?????00000010000000\n0000000??????????101?????0110011->100000111001???101010?????00000010000000\n0000000??????????101?????0111011->100000111001???001010?????00000010000000\n?????????????????101?????1100011->100100111001001111010?????00000000000000\n?????????????????101?????1110011->100000001100101100000?????00000011010000\n?????????????????110?????0000011->1000000111011001000010000000000010000000\n?????????????????110?????0001011->101000010001???100000?????00000010000000\n?????????????????110?????0010011->100000011101100101100?????00000010000000\n?????????????????110?????0101011->101000010001???100000?????00000010000000\n0000000??????????110?????0110011->100000111001???101100?????00000010000000\n?????????????????110?????1011011->101000010001???100000?????00000010000000\n?????????????????110?????1100011->100100111001001111100?????00000000000000\n?????????????????110?????1110011->100000001100101100000?????00000011100000\n?????????????????110?????1111011->101000010001???100000?????00000010000000\n?????????????????111?????0001011->101000110001???100000?????00000010000000\n?????????????????111?????0010011->100000011101100101110?????00000010000000\n?????????????????111?????0101011->101000110001???100000?????00000010000000\n0000000??????????111?????0110011->100000111001???101110?????00000010000000\n?????????????????111?????1011011->101000110001???100000?????00000010000000\n?????????????????111?????1100011->100100111001001111110?????00000000000000\n?????????????????111?????1110011->100000001100101100000?????00000011110000\n?????????????????111?????1111011->101000110001???100000?????00000010000000\n00000000000100000000000001110011->1000000?????????????0?????00000001000000\n0000001??????????000?????0110011->100000111001???100000?????00000110000000\n0000001??????????000?????0111011->100000111001???000000?????00000110000000\n?????01??????????????????1000011->11000000????????????0?????11110000000001\n?????01??????????????????1000111->11000000????????????0?????11110000000001\n?????01??????????????????1001011->11000000????????????0?????11110000000001\n?????01??????????????????1001111->11000000????????????0?????11110000000001\n0000001??????????????????1010011->11000000????????????0?????11010000000001\n0000001??????????001?????0110011->100000111001???100010?????00000110000000\n0000001??????????010?????0110011->100000111001???100100?????00000110000000\n0000001??????????011?????0110011->100000111001???100110?????00000110000000\n0000001??????????100?????0110011->100000111001???101000?????00000110000000\n0000001??????????100?????0111011->100000111001???001000?????00000110000000\n0000001??????????101?????0110011->100000111001???101010?????00000110000000\n0000001??????????101?????0111011->100000111001???001010?????00000110000000\n0000001??????????110?????0110011->100000111001???101100?????00000110000000\n0000001??????????110?????0111011->100000111001???001100?????00000110000000\n0000001??????????111?????0110011->100000111001???101110?????00000110000000\n0000001??????????111?????0111011->100000111001???001110?????00000110000000\n0000100??????????????????1010011->11000000????????????0?????11010000000000\n00001????????????010?????0101111->100000110001???1000010010000000010000010\n00001????????????011?????0101111->100000110001???1000010010000000010000010\n0000101??????????????????1010011->11000000????????????0?????11010000000001\n0001000??????????????????1010011->11000000????????????0?????11010000000000\n00010??00000?????010?????0101111->100000110001???1000010011000000010000010\n00010??00000?????011?????0101111->100000110001???1000010011000000010000010\n00010000001000000000000001110011->1000000?????????????0?????00000001000000\n00010000010100000000000001110011->1000000?????????????0?????00000001000000\n0001001??????????????????1010011->11000000????????????0?????11010000000001\n0001001??????????000000001110011->100000110001???1000011010000000001000000\n0001100??????????????????1010011->11000000????????????0?????11010000000000\n00011????????????010?????0101111->100000110001???1000010011100000010000010\n00011????????????011?????0101111->100000110001???1000010011100000010000010\n0001101??????????????????1010011->11000000????????????0?????11010000000001\n0010000??????????000?????1010011->11000000????????????0?????11010000000000\n0010000??????????001?????1010011->11000000????????????0?????11010000000000\n00100????????????010?????0101111->100000110001???1000010100100000010000010\n0010000??????????010?????1010011->11000000????????????0?????11010000000000\n00100????????????011?????0101111->100000110001???1000010100100000010000010\n0010001??????????000?????1010011->11000000????????????0?????11010000000001\n0010001??????????001?????1010011->11000000????????????0?????11010000000001\n0010001??????????010?????1010011->11000000????????????0?????11010000000001\n0010100??????????000?????1010011->11000000????????????0?????11010000000000\n0010100??????????001?????1010011->11000000????????????0?????11010000000000\n0010101??????????000?????1010011->11000000????????????0?????11010000000001\n0010101??????????001?????1010011->11000000????????????0?????11010000000001\n00110000001000000000000001110011->1000000?????????????0?????00000001000000\n00110000010100000000000001110011->1000000?????????????0?????00000001000000\n0100000??????????000?????0110011->100000111001???110100?????00000010000000\n0100000??????????000?????0111011->100000111001???010100?????00000010000000\n01000????????????010?????0101111->100000110001???1000010101000000010000010\n01000????????????011?????0101111->100000110001???1000010101000000010000010\n010000???????????101?????0010011->100000011101100110110?????00000010000000\n0100000??????????101?????0011011->100000011101100010110?????00000010000000\n0100000??????????101?????0110011->100000111001???110110?????00000010000000\n0100000??????????101?????0111011->100000111001???010110?????00000010000000\n010000000001?????????????1010011->11000000????????????0?????10010000000001\n010000100000?????????????1010011->11000000????????????0?????10010000000001\n010110000000?????????????1010011->11000000????????????0?????11010000000000\n010110100000?????????????1010011->11000000????????????0?????11010000000001\n01100????????????010?????0101111->100000110001???1000010101100000010000010\n01100????????????011?????0101111->100000110001???1000010101100000010000010\n01111011001000000000000001110011->1000000?????????????0?????00000001000000\n10000????????????010?????0101111->100000110001???1000010110000000010000010\n10000????????????011?????0101111->100000110001???1000010110000000010000010\n1010000??????????000?????1010011->11000000????????????0?????11000010000000\n1010000??????????001?????1010011->11000000????????????0?????11000010000000\n10100????????????010?????0101111->100000110001???1000010110100000010000010\n1010000??????????010?????1010011->11000000????????????0?????11000010000000\n10100????????????011?????0101111->100000110001???1000010110100000010000010\n1010001??????????000?????1010011->11000000????????????0?????11000010000001\n1010001??????????001?????1010011->11000000????????????0?????11000010000001\n1010001??????????010?????1010011->11000000????????????0?????11000010000001\n110000000000?????????????1010011->11000000????????????0?????10000010000000\n11000????????????010?????0101111->100000110001???1000010111000000010000010\n11000????????????011?????0101111->100000110001???1000010111000000010000010\n110000000001?????????????1010011->11000000????????????0?????10000010000000\n110000000010?????????????1010011->11000000????????????0?????10000010000000\n110000000011?????????????1010011->11000000????????????0?????10000010000000\n110000100000?????????????1010011->11000000????????????0?????10000010000001\n110000100001?????????????1010011->11000000????????????0?????10000010000001\n110000100010?????????????1010011->11000000????????????0?????10000010000001\n110000100011?????????????1010011->11000000????????????0?????10000010000001\n110100000000?????????????1010011->11000001??01????????0?????00010000000000\n110100000001?????????????1010011->11000001??01????????0?????00010000000000\n110100000010?????????????1010011->11000001??01????????0?????00010000000000\n110100000011?????????????1010011->11000001??01????????0?????00010000000000\n110100100000?????????????1010011->11000001??01????????0?????00010000000001\n110100100001?????????????1010011->11000001??01????????0?????00010000000001\n110100100010?????????????1010011->11000001??01????????0?????00010000000001\n110100100011?????????????1010011->11000001??01????????0?????00010000000001\n111000000000?????000?????1010011->11000000????????????0?????10000010000000\n111000000000?????001?????1010011->11000000????????????0?????10000010000000\n11100????????????010?????0101111->100000110001???1000010111100000010000010\n11100????????????011?????0101111->100000110001???1000010111100000010000010\n111000100000?????000?????1010011->11000000????????????0?????10000010000001\n111000100000?????001?????1010011->11000000????????????0?????10000010000001\n111100000000?????000?????1010011->11000001??01????????0?????00010000000000\n111100100000?????000?????1010011->11000001??01????????0?????00010000000001\n                                  0???????????????????0???????????????????",
    "minimizedTable": "???????????????????0?????00?0011->1??????111?11??1????????????????1???????\n???????????????????0?????0000011->????????????????????1???????????????????\n??????????????????0??????0000011->1??????111?11??1????1???????????1???????\n?????????????????0???????0?00011->1??????111?1???1????1???????????????????\n?????????????????0???????0000011->????????????????????????????????1???????\n?????????????????000?????00??011->1??????????1????????????????????????????\n???????????????????0?????0?01011->1?1????????1???1????????????????????????\n?????????????????00??????0001111->1????????????????????????????????????1??\n?????????????????000?????001?011->???????111??1???????????????????1???????\n?????????????????????????0?10111->1???????11???1?1????????????????1???????\n?????????????????????????0010111->??????????1?????????????????????????????\n?????????????????0???????0100011->??????1??????????????????1??????????????\n?????????????????00???????100011->??????1?????????????????????????????????\n0?00000??????????000?????011?011->1?????111??1????????????????????1???????\n0?00000??????????000?????0110011->???????????????1????????????????????????\n000000???????????????????0110011->1?????111??1???1????????????????1???????\n000000???????????000?????011?011->1?????111??1????????????????????1???????\n0000000??????????00??????011?011->??????1?????????????????????????????????\n?????????????????????????100??11->?1????????????????????????1111??????????\n?????0???????????????????100??11->1???????????????????????????????????????\n000??0???????????????????1010011->11????????????????????????11?1??????????\n???????????????????0?????1?11011->1?1????????1???1????????????????????????\n??????????????????0??????1100011->???1????1?????1?????????????????????????\n?????????????????00??????1100011->??????????????????1?????????????????????\n?????????????????000?????1100?11->1??????11??1???1????????????????????????\n?????????????????000?????1100111->?????1???1??1???????????????????1???????\n?????????????????????????1101111->1???1????11??111????????????????1???????\n00000000000?00000000000001110??1->?????????????????????????????????1??????\n00000000000?00000000000001110011->1???????????????????????????????????????\n?????????????????001?????0001111->????????????????????????????????????1???\n000000????????????01?????0?10011->1??????11??1???1???1????????????1???????\n000000????????????01?????0010011->?????????1??1???????????????????????????\n0000000???????????01?????0?11011->1??????11??1???????1????????????1???????\n0000000???????????01?????0011011->?????????1??1???????????????????????????\n??????????????????01?????11?0011->1??????????????1????????????????????????\n??????????????????01?????1100011->???????????????????1????????????????????\n?????????????????001?????11?0011->???????1???1????????????????????????????\n???????????????????1?????1110011->????????????????????????????????11?1????\n?????????????????01??????0?00?11->1??????111?1???1????1???????????????????\n?????????????????01??????0000?11->????????????1???????????????????????????\n?????????????????01??????0?00111->?1??????????????????????????????????????\n?????????????????01??????0000111->?????????????????????????????1??????????\n??????????????????1??????0?01011->1?1????1???1???1????????????????????????\n??????????????????1??????0010011->1??????111?11??1?1??????????????1???????\n?????????????????01??????0010011->????????????????1???????????????????????\n?????????????????01??????0100?11->?????????????????????????1??????????????\n?????????????????01??????0100111->???????????????????????????1????????????\n???00????????????01??????0101111->1?????11???1???1????1?1?????????1?????1?\n0000000???????????1??????0110011->?????????????????1??????????????????????\n0000000??????????01??????0110011->????????????????1???????????????????????\n??????????????????1??????1?11011->1?1????1???1???1????????????????????????\n??????????????????1??????111?011->1??????????????1????????????????????????\n??????????????????1??????1110011->????????????????????????????????111?????\n?????????????????01??????111?011->???????1???1????????????????????????????\n?????????????????011?????0?00111->???????????????????????????????????????1\n??????????????????11?????0?01011->??????1?????????????????????????????????\n??????????????????11?????0010011->??????????????????1?????????????????????\n000000????????????11?????0110011->??????????????????1?????????????????????\n??????????????????11?????1?11011->??????1?????????????????????????????????\n?????????????????1?0?????0?01011->????????????????????????????????1???????\n?????????????????1?0?????0010011->?????????????????1??????????????????????\n000000???????????1???????0110011->?????????????????1??????????????????????\n?????????????????1?0?????1?11011->????????????????????????????????1???????\n?????????????????1???????1100011->1??1??11???1???111??????????????????????\n0?0000???????????101?????0010011->1??????111?11??1???1????????????1???????\n000000???????????101?????0?10011->?????????????????1??????????????????????\n0?00000??????????101?????0?11011->1??????11??1???????1????????????1???????\n0?00000??????????101?????0011011->?????????1??1???????????????????????????\n0000000??????????101?????0?11011->?????????????????1??????????????????????\n0?00000??????????101?????011?011->1?????111??1???????1????????????1???????\n0?00000??????????101?????0110011->???????????????1????????????????????????\n000000???????????1?1?????0110011->???????????????????1????????????????????\n?????????????????1?1?????11?0011->????????1?????1?????????????????????????\n?????????????????1?1?????1100011->???????????????????1????????????????????\n?????????????????1?1?????1110011->?????????1??1???????????????????????????\n?????????????????11??????0?01011->????????????????????????????????1???????\n?????????????????11??????0010011->??????????????????1?????????????????????\n000000???????????11??????0110011->??????????????????1?????????????????????\n?????????????????11??????1?11011->????????????????????????????????1???????\n?????????????????11??????11?0011->????????1?????1?????????????????????????\n?????????????????11??????1100011->??????????????????1?????????????????????\n?????????????????11??????1110011->?????????1??1???????????????????????????\n?????????????????111?????0010011->???????????????????1????????????????????\n0000001??????????????????0110011->???????????????????????????????1????????\n0000001???????????00?????011?011->???????????????????????????????1????????\n?????01??????????????????100??11->???????????????????????????????????????1\n000??01??????????????????1010011->???????????????????????????????????????1\n0000001????????????1?????0110011->???????????????????1????????????????????\n0000001???????????1??????0110011->??????????????????1?????????????????????\n0000001??????????1???????011?011->1?????111??1?????1?????????????11???????\n0000001??????????1?1?????011?011->???????????????????1????????????????????\n0000001??????????11??????011?011->??????????????????1?????????????????????\n000?1????????????01??????0101111->1?????11???1???1????1??1????????1?????1?\n00010??00000?????????????0101111->??????11???1???1???????11???????1?????1?\n00010??00000?????01??????0101111->1???????????????????1???????????????????\n00?10000001000000000000001110??1->?????????????????????????????????1??????\n00?10000001000000000000001110011->1???????????????????????????????????????\n00?10000010100000000000001110??1->?????????????????????????????????1??????\n00?10000010100000000000001110011->1???????????????????????????????????????\n0001001???????????????0001110011->???????????????1?????1?1?????????1??????\n0001001??????????0????0001110011->???????1???1????????????????????????????\n0001001??????????000??0001110011->??????1?????????????????????????????????\n0001001??????????000000001110011->1???????????????????1???????????????????\n00011????????????01??????0101111->????????????????????????11??????????????\n?01000???????????0?0?????1010011->11????????????????????????11????????????\n?01000???????????00??????1010011->11????????????????????????11????????????\n0010?0???????????00??????1010011->11????????????????????????11?1??????????\n001000???????????0?0?????1010011->?????????????????????????????1??????????\n??100????????????01??????0101111->?????????????????????????1??????????????\n?010001??????????0?0?????1010011->???????????????????????????????????????1\n?010001??????????00??????1010011->???????????????????????????????????????1\n0010?01??????????00??????1010011->???????????????????????????????????????1\n0100000??????????000?????011?011->????????????????1?1?????????????????????\n?1?00????????????01??????0101111->????????????????????????1???????????????\n010000???????????101?????0010011->????????????????1?1?????????????????????\n0100000??????????101?????0?11011->????????????????1?1?????????????????????\n0100000??????????101?????011?011->????????????????1?1?????????????????????\n?10000000001?????????????1010011->11????????????????????????1?????????????\n010000000001?????????????1010011->?????????????????????????????1?????????1\n?10000100000?????????????1010011->11????????????????????????1????????????1\n010000100000?????????????1010011->?????????????????????????????1??????????\n010110?00000?????????????1010011->11????????????????????????11?1??????????\n010110100000?????????????1010011->???????????????????????????????????????1\n01111011001000000000000001110???->?????????????????????????????????1??????\n01111011001000000000000001110011->1???????????????????????????????????????\n1??00????????????01??????0101111->???????????????????????1????????????????\n101000???????????0?0?????1010011->????????????????????????????????1???????\n101000???????????00??????1010011->????????????????????????????????1???????\n11??00?00000?????????????1010011->?1??????????????????????????????????????\n110?00?000???????????????1010011->11??????????????????????????????????????\n110000?000???????????????1010011->??????????????????????????1?????1???????\n110?001000???????????????1010011->???????????????????????????????????????1\n110100?000???????????????1010011->???????1???1?????????????????1??????????\n111?00?00000?????000?????1010011->1???????????????????????????????????????\n111000?00000?????00??????1010011->1?????????????????????????1?????1???????\n111?00100000?????000?????1010011->???????????????????????????????????????1\n111000100000?????00??????1010011->???????????????????????????????????????1\n111100?00000?????000?????1010011->???????1???1?????????????????1??????????\n                                  0???????????????????0???????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>decoded_decoded",
    "truthTable": "000000000001->000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000010->000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000011->000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000100000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000\n000100000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000\n000100000101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000\n000100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\n000100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000\n000101000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000\n000101000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000\n000101000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000\n000101000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000\n000101000100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000\n000110000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000\n001100000000->000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000001->000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000\n001100000011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000\n001100000100->000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000101->000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100000110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000\n001100001010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000\n001100100000->000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100011->000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100100->000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100101->000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100110->000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100100111->000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101000->000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101001->000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101010->000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101011->000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101100->000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101101->000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101110->000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100101111->000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110000->000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110001->000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110010->000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110011->000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110100->000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000\n001100110101->000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000\n001100110110->000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000\n001100110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000\n001100111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000\n001100111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000\n001100111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000\n001100111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000\n001100111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000\n001100111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000\n001100111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000\n001100111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000\n001101000000->000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000001->000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000010->000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000011->000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001101000100->000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n001110100000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000\n001110100010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000\n001110110000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000\n001110110001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000\n001110110010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000\n001110110011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000\n001110110100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000\n001110110101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000\n001110110110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000\n001110110111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000\n001110111000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000\n001110111001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000\n001110111010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000\n001110111011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000\n001110111100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000\n001110111101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000\n001110111110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000\n001110111111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000\n011110100000->100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100001->010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100010->001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110100011->000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110000->000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110001->000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011110110010->000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n011111000001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000\n101100000000->000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000010->000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000011->000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000100->000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000101->000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000110->000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100000111->000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001000->000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001001->000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001010->000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001011->000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001100->000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001101->000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001110->000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100001111->000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010000->000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010001->000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010010->000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010011->000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000\n101100010100->000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000\n101100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000\n101100010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000\n101100010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000\n101100011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000\n101100011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000\n101100011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000\n101100011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000\n101100011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000\n101100011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000\n101100011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000\n101100011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000\n110000000000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000\n110000000010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000\n110000000011->000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000100->000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000101->000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000110->000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000111->000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001000->000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001001->000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001010->000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001011->000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001100->000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001101->000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001110->000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000001111->000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010000->000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010001->000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010010->000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010011->000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000\n110000010100->000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000\n110000010101->000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000\n110000010110->000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000\n110000010111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000\n110000011000->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000\n110000011001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000\n110000011010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000\n110000011011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000\n110000011100->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000\n110000011101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000\n110000011110->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000\n110000011111->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000\n111100010001->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100\n111100010010->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000\n111100010011->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010\n111100010100->000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n111100010101->000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
    "minimizedTable": "00000000000?->?????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000010->??????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n000000000011->???????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0001000000??->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????\n000100000100->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????\n000100000101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????\n00010000011?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????\n000100001???->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????\n000101000000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????\n000101000001->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????\n000101000010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????\n000101000011->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????\n0001010001??->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????\n00011???????->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????\n001100000000->?????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000001->????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000010->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????\n001100000011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????\n001100000100->????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100000101->??????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110000011?->??????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????\n001100001???->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????\n00110010000?->????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00110010001?->???????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100100->??????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100101->?????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100110->????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100100111->???????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101000->??????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101001->?????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101010->????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101011->???????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????\n001100101100->??????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????\n001100101101->?????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????\n001100101110->????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????\n001100101111->???????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????\n001100110000->??????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????\n001100110001->?????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????\n001100110010->????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????\n001100110011->???????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????\n001100110100->??????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????\n001100110101->?????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????\n001100110110->????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????\n001100110111->???????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????\n001100111000->??????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????\n001100111001->?????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????\n001100111010->????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????\n001100111011->???????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????\n001100111100->??????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????\n001100111101->?????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????\n001100111110->????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????\n001100111111->???????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????\n001101000000->?????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000001->??????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000010->????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n001101000011->???????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n0011010001??->???????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n00111010000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????\n00111010001?->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????\n001110110000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????\n001110110001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????\n001110110010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????\n001110110011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????\n001110110100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????\n001110110101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????\n001110110110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????\n001110110111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????\n001110111000->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????\n001110111001->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????\n001110111010->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????\n001110111011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????\n001110111100->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????\n001110111101->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???????\n001110111110->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????\n001110111111->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????\n011110100000->1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100001->?1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100010->??1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110100011->???1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110000->??????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011110110001->???????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n01111011001?->????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n011111??????->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????\n10110000000?->?????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000010->??????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000011->????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000100->???????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000101->??????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000110->?????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100000111->????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001000->???????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001001->??????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001010->?????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001011->????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????\n101100001100->???????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????\n101100001101->??????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????\n101100001110->?????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????\n101100001111->????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????\n101100010000->???????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????\n101100010001->??????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????\n101100010010->?????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????\n101100010011->????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????\n101100010100->???????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????\n101100010101->??????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????\n101100010110->?????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????\n101100010111->????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????\n101100011000->???????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????\n101100011001->??????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????\n101100011010->?????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????\n101100011011->????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????\n101100011100->???????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????\n101100011101->??????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????\n101100011110->?????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????\n101100011111->????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????\n11000000000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????\n110000000010->????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????\n110000000011->?????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000100->????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000101->???????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000110->??????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000000111->?????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001000->????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001001->???????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001010->??????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001011->?????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????????????????\n110000001100->????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????????????\n110000001101->???????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????????????????\n110000001110->??????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????\n110000001111->?????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????????????????\n110000010000->????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????\n110000010001->???????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????????????????\n110000010010->??????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????\n110000010011->?????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????????????????\n110000010100->????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????\n110000010101->???????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????????????????\n110000010110->??????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????\n110000010111->?????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????????????????\n110000011000->????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????\n110000011001->???????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????????????????\n110000011010->??????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????\n110000011011->?????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????????????????\n110000011100->????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????????????????????\n110000011101->???????????????????????????????????????????????????????????????????????????????????????????????????????1??????????????????????????????????????????????\n110000011110->??????????????????????????????????????????????????????????????????????????????????????????????????????????1???????????????????????????????????????????\n110000011111->?????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????????????????????????????????????\n11110001000?->???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1??\n111100010010->??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1???\n111100010011->????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?\n111100010100->?????????????1????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n111100010101->?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1\n              ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>decoded",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>decoded_150",
    "truthTable": "00000000000000000000000001110011->100000000\n00000000000100000000000001110011->010000000\n00010000001000000000000001110011->001000000\n00010000010100000000000001110011->000010000\n0001001??????????000000001110011->000001000\n00110000001000000000000001110011->001000000\n00110000010100000000000001110011->000100000\n01111011001000000000000001110011->001000000\n                                  ?????????",
    "minimizedTable": "000000000000????????????????????->1????????\n000000000001????????????????????->?1???????\n00?1000000?????????????????????1->??1??????\n0001000001??????????????????????->????1????\n0001001???????????????0001110011->?????1???\n0011000001??????????????????????->???1?????\n01??????????????????????????????->??1??????\n                                  ?????????"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>io_decode_0_fp_csr_plaOutput",
    "truthTable": "000000000001->1\n000000000010->1\n000000000011->1\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "0000????????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>io_decode_0_read_illegal_plaOutput",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->1\n011110110001->1\n011110110010->1\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "01111011????->1\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|CSRFile_2>io_decode_0_read_illegal_plaOutput_1",
    "truthTable": "000000000001->0\n000000000010->0\n000000000011->0\n000100000000->0\n000100000100->0\n000100000101->0\n000100000110->0\n000100001010->0\n000101000000->0\n000101000001->0\n000101000010->0\n000101000011->0\n000101000100->0\n000110000000->0\n001100000000->0\n001100000001->0\n001100000010->0\n001100000011->0\n001100000100->0\n001100000101->0\n001100000110->0\n001100001010->0\n001100100000->0\n001100100011->0\n001100100100->0\n001100100101->0\n001100100110->0\n001100100111->0\n001100101000->0\n001100101001->0\n001100101010->0\n001100101011->0\n001100101100->0\n001100101101->0\n001100101110->0\n001100101111->0\n001100110000->0\n001100110001->0\n001100110010->0\n001100110011->0\n001100110100->0\n001100110101->0\n001100110110->0\n001100110111->0\n001100111000->0\n001100111001->0\n001100111010->0\n001100111011->0\n001100111100->0\n001100111101->0\n001100111110->0\n001100111111->0\n001101000000->0\n001101000001->0\n001101000010->0\n001101000011->0\n001101000100->0\n001110100000->0\n001110100010->0\n001110110000->0\n001110110001->0\n001110110010->0\n001110110011->0\n001110110100->0\n001110110101->0\n001110110110->0\n001110110111->0\n001110111000->0\n001110111001->0\n001110111010->0\n001110111011->0\n001110111100->0\n001110111101->0\n001110111110->0\n001110111111->0\n011110100000->0\n011110100001->0\n011110100010->0\n011110100011->0\n011110110000->0\n011110110001->0\n011110110010->0\n011111000001->0\n101100000000->0\n101100000010->0\n101100000011->0\n101100000100->0\n101100000101->0\n101100000110->0\n101100000111->0\n101100001000->0\n101100001001->0\n101100001010->0\n101100001011->0\n101100001100->0\n101100001101->0\n101100001110->0\n101100001111->0\n101100010000->0\n101100010001->0\n101100010010->0\n101100010011->0\n101100010100->0\n101100010101->0\n101100010110->0\n101100010111->0\n101100011000->0\n101100011001->0\n101100011010->0\n101100011011->0\n101100011100->0\n101100011101->0\n101100011110->0\n101100011111->0\n110000000000->0\n110000000010->0\n110000000011->0\n110000000100->0\n110000000101->0\n110000000110->0\n110000000111->0\n110000001000->0\n110000001001->0\n110000001010->0\n110000001011->0\n110000001100->0\n110000001101->0\n110000001110->0\n110000001111->0\n110000010000->0\n110000010001->0\n110000010010->0\n110000010011->0\n110000010100->0\n110000010101->0\n110000010110->0\n110000010111->0\n110000011000->0\n110000011001->0\n110000011010->0\n110000011011->0\n110000011100->0\n110000011101->0\n110000011110->0\n110000011111->0\n111100010001->0\n111100010010->0\n111100010011->0\n111100010100->0\n111100010101->0\n              ?",
    "minimizedTable": "????????????->0\n              ?"
  },
  {
    "class": "chisel3.util.experimental.decode.DecodeTableAnnotation",
    "target": "~TestHarness|MulDiv_2>decoded",
    "truthTable": "000->10??\n001->1111\n010->1110\n011->1100\n100->0011\n101->0000\n110->0111\n111->0100\n     ????",
    "minimizedTable": "??0->??1?\n0??->1???\n00?->??11\n0?1->?1??\n?1?->?1??\n1?0->???1\n     ????"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_106",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[0].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[0].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[1].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[1].deq"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[2].count"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|RocketTile_2>q[2].deq"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain_2.auto.rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.HierarchicalElementResetDomain_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.FixedClockBroadcast_8"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_107",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_108",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.TilePRCIDomain_2.auto.element_reset_domain_rockettile_trace_core_source_out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|BundleBridgeNexus_21>outputs_0"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|BundleBridgeNexus_21>outputs_1"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|BundleBridgeNexus_21>outputs_2"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_22"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_109",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_110",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.CLINT",
    "paramsClassName": "freechips.rocketchip.devices.tilelink.CLINTParams",
    "params": {
      "baseAddress": 33554432,
      "intStages": 0
    }
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.CLINT",
    "regMappingSer": {
      "displayName": "CLINT",
      "deviceName": "CLINT",
      "baseAddress": 33554432,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "msip_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "MSIP bit for Hart 0",
          "group": "msip",
          "groupDesc": "MSIP Bits",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "msip",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 32,
          "bitWidth": 1,
          "name": "msip_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "MSIP bit for Hart 1",
          "group": "msip",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 33,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "msip",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 64,
          "bitWidth": 1,
          "name": "msip_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "MSIP bit for Hart 2",
          "group": "msip",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 65,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "msip",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "mtimecmp_0_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "MTIMECMP for hart 0",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "mtimecmp_0_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "mtimecmp_0_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "mtimecmp_0_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "mtimecmp_0_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "mtimecmp_0_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "mtimecmp_0_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "mtimecmp_0_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_0",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "mtimecmp_1_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "MTIMECMP for hart 1",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "mtimecmp_1_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "mtimecmp_1_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "mtimecmp_1_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "mtimecmp_1_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "mtimecmp_1_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "mtimecmp_1_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "mtimecmp_1_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_1",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "mtimecmp_2_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "MTIMECMP for hart 2",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "mtimecmp_2_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "mtimecmp_2_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "mtimecmp_2_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "mtimecmp_2_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "mtimecmp_2_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "mtimecmp_2_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4000",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "mtimecmp_2_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtimecmp_2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "mtime_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "Timer Register",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "mtime_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "mtime_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "mtime_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "mtime_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "mtime_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "mtime_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xbff8",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "mtime_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "mtime",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_111",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_112",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.TLPLIC",
    "paramsClassName": "freechips.rocketchip.devices.tilelink.PLICParams",
    "params": {
      "baseAddress": 201326592,
      "maxPriorities": 7,
      "intStages": 0,
      "maxHarts": 15872
    }
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TLPLIC",
    "regMappingSer": {
      "displayName": "TLPLIC",
      "deviceName": "TLPLIC",
      "baseAddress": 201326592,
      "regFields": [
        {
          "byteOffset": "0x4",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "priority_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Acting priority of interrupt source 1",
          "group": "priority_1",
          "groupDesc": "Acting priority of interrupt source 1",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x1000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x1000",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "pending_1",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Set to 1 if interrupt source 1 is pending, regardless of its enable or priority setting.",
          "group": "pending",
          "groupDesc": "Pending Bit Array. 1 Bit for each interrupt source.",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2000",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_0",
          "groupDesc": "Enable bits for each interrupt source for target 0. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2080",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2080",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_1",
          "groupDesc": "Enable bits for each interrupt source for target 1. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2100",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2100",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_2",
          "groupDesc": "Enable bits for each interrupt source for target 2. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2180",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2180",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_3",
          "groupDesc": "Enable bits for each interrupt source for target 3. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2200",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2200",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_4",
          "groupDesc": "Enable bits for each interrupt source for target 4. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2280",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x2280",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "enables_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Targets 1-1. Set bits to 1 if interrupt should be enabled.",
          "group": "enables_5",
          "groupDesc": "Enable bits for each interrupt source for target 5. 1 bit for each interrupt source.",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x200000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 0. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x200000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x200000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 0. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x201000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 1. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x201000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x201000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 1. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x202000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 2. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x202000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x202000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 2. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x203000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 3. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x203000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x203000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 3. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x204000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 4. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x204000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x204000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 4. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x205000",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "threshold_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Interrupt & claim threshold for target 5. Maximum value is 1.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x205000",
          "bitOffset": 1,
          "bitWidth": 31,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x205000",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "claim_complete_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(MODIFY)",
          "rdAction": "Some(MODIFY)",
          "desc": "Claim/Complete register for Target 5. Reading this register returns the claimed interrupt number and makes it no longer pending.Writing the interrupt number back completes the interrupt.",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_113",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_114",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_115",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_116",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TLDebugModuleOuter",
    "regMappingSer": {
      "displayName": "TLDebugModuleOuter",
      "deviceName": "TLDebugModuleOuter",
      "baseAddress": 64,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "dmactive",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "debug module active",
          "group": "dmcontrol",
          "groupDesc": "debug module control register",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "ndmreset",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "debug module reset output",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 2,
          "bitWidth": 1,
          "name": "clrresethaltreq",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "clear reset halt request",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 3,
          "bitWidth": 1,
          "name": "setresethaltreq",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "set reset halt request",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 4,
          "bitWidth": 12,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 16,
          "bitWidth": 2,
          "name": "hartsello",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "hart select low",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 18,
          "bitWidth": 8,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 26,
          "bitWidth": 1,
          "name": "hasel",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "hart array select",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 27,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 28,
          "bitWidth": 1,
          "name": "ackhavereset",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "acknowledge reset",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 29,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 30,
          "bitWidth": 1,
          "name": "resumereq",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "resume request",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 31,
          "bitWidth": 1,
          "name": "haltreq",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "halt request",
          "group": "dmcontrol",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 0,
          "bitWidth": 12,
          "name": "dataaddr",
          "resetValue": 896,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "data address",
          "group": "dmi_hartinfo",
          "groupDesc": "hart information",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 12,
          "bitWidth": 4,
          "name": "datasize",
          "resetValue": 8,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "number of DATA registers",
          "group": "dmi_hartinfo",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 16,
          "bitWidth": 1,
          "name": "dataaccess",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "data access type",
          "group": "dmi_hartinfo",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 17,
          "bitWidth": 3,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_hartinfo",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 20,
          "bitWidth": 4,
          "name": "nscratch",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "number of scratch registers",
          "group": "dmi_hartinfo",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x14",
          "bitOffset": 0,
          "bitWidth": 3,
          "name": "hawindow",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "hart array window",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_117",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_118",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_119",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_120",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_121",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_122",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_123",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_124",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_125",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_126",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.ParamsAnnotation",
    "target": "TestHarness.TLDebugModuleInner",
    "paramsClassName": "freechips.rocketchip.devices.debug.DebugModuleParams",
    "params": {
      "nDMIAddrSize": 7,
      "nAbstractDataWords": 8,
      "nProgramBufferWords": 16,
      "supportQuickAccess": false,
      "supportHartArray": true,
      "maxSupportedSBAccess": 64,
      "clockGate": true,
      "nExtTriggers": 0,
      "hasAuthentication": false,
      "nHaltGroups": 1,
      "nScratch": 1,
      "baseAddress": 0,
      "hasImplicitEbreak": false,
      "hasHartResets": false,
      "hasBusMaster": false,
      "crossingHasSafeReset": true
    }
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TLDebugModuleInner",
    "regMappingSer": {
      "displayName": "TLDebugModuleInner",
      "deviceName": "TLDebugModuleInner",
      "baseAddress": 0,
      "regFields": [
        {
          "byteOffset": "0x44",
          "bitOffset": 0,
          "bitWidth": 4,
          "name": "version",
          "resetValue": 2,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "version",
          "group": "dmi_dmstatus",
          "groupDesc": "debug module status register",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 4,
          "bitWidth": 1,
          "name": "confstrptrvalid",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "confstrptrvalid",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 5,
          "bitWidth": 1,
          "name": "hasresethaltreq",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "hasresethaltreq",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 6,
          "bitWidth": 1,
          "name": "authbusy",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "authbusy",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 7,
          "bitWidth": 1,
          "name": "authenticated",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "authenticated",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 8,
          "bitWidth": 1,
          "name": "anyhalted",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anyhalted",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 9,
          "bitWidth": 1,
          "name": "allhalted",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allhalted",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 10,
          "bitWidth": 1,
          "name": "anyrunning",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anyrunning",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 11,
          "bitWidth": 1,
          "name": "allrunning",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allrunning",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 12,
          "bitWidth": 1,
          "name": "anyunavail",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anyunavail",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 13,
          "bitWidth": 1,
          "name": "allunavail",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allunavail",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 14,
          "bitWidth": 1,
          "name": "anynonexistent",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anynonexistent",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 15,
          "bitWidth": 1,
          "name": "allnonexistent",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allnonexistent",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 16,
          "bitWidth": 1,
          "name": "anyresumeack",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anyresumeack",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 17,
          "bitWidth": 1,
          "name": "allresumeack",
          "resetValue": 1,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allresumeack",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 18,
          "bitWidth": 1,
          "name": "anyhavereset",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "anyhavereset",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 19,
          "bitWidth": 1,
          "name": "allhavereset",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "allhavereset",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 20,
          "bitWidth": 2,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x44",
          "bitOffset": 22,
          "bitWidth": 1,
          "name": "impebreak",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "impebreak",
          "group": "dmi_dmstatus",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc8",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "hgselect",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "select halt groups or external triggers",
          "group": "dmi_dmcs2",
          "groupDesc": "debug module control/status register 2",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc8",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "hgwrite",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "write 1 to change halt groups",
          "group": "dmi_dmcs2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc8",
          "bitOffset": 2,
          "bitWidth": 5,
          "name": "haltgroup",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "halt group",
          "group": "dmi_dmcs2",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc8",
          "bitOffset": 7,
          "bitWidth": 4,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_dmcs2",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x100",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "dmi_haltsum0",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "halt summary 0",
          "group": "dmi_haltsum0",
          "groupDesc": "Halt Summary 0",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4c",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "dmi_haltsum1",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "halt summary 1",
          "group": "dmi_haltsum1",
          "groupDesc": "Halt Summary 1",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 0,
          "bitWidth": 4,
          "name": "datacount",
          "resetValue": 8,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "number of DATA registers",
          "group": "dmi_abstractcs",
          "groupDesc": "abstract command control/status",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 4,
          "bitWidth": 4,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 8,
          "bitWidth": 3,
          "name": "cmderr",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "Some(ONE_TO_CLEAR)",
          "rdAction": "None",
          "desc": "command error",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 11,
          "bitWidth": 1,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 12,
          "bitWidth": 1,
          "name": "busy",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "busy",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 13,
          "bitWidth": 11,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x58",
          "bitOffset": 24,
          "bitWidth": 5,
          "name": "progbufsize",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "number of PROGBUF registers",
          "group": "dmi_abstractcs",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x60",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "autoexecdata",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data autoexec",
          "group": "dmi_abstractauto",
          "groupDesc": "abstract command autoexec",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x60",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "dmi_abstractauto",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x60",
          "bitOffset": 16,
          "bitWidth": 16,
          "name": "autoexecprogbuf",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf autoexec",
          "group": "dmi_abstractauto",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x5c",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "dmi_command",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command register",
          "group": "dmi_command",
          "groupDesc": "Abstract Command Register",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "dmi_data_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 0",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "dmi_data_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 1",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "dmi_data_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 2",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "dmi_data_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 3",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "dmi_data_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 4",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "dmi_data_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 5",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "dmi_data_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 6",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "dmi_data_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 7",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "dmi_data_8",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 8",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "dmi_data_9",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 9",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "dmi_data_10",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 10",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "dmi_data_11",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 11",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "dmi_data_12",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 12",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "dmi_data_13",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 13",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "dmi_data_14",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 14",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "dmi_data_15",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 15",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "dmi_data_16",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 16",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "dmi_data_17",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 17",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "dmi_data_18",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 18",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "dmi_data_19",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 19",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "dmi_data_20",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 20",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "dmi_data_21",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 21",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "dmi_data_22",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 22",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "dmi_data_23",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 23",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 192,
          "bitWidth": 8,
          "name": "dmi_data_24",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 24",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 200,
          "bitWidth": 8,
          "name": "dmi_data_25",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 25",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 208,
          "bitWidth": 8,
          "name": "dmi_data_26",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 26",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 216,
          "bitWidth": 8,
          "name": "dmi_data_27",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 27",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 224,
          "bitWidth": 8,
          "name": "dmi_data_28",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 28",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 232,
          "bitWidth": 8,
          "name": "dmi_data_29",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 29",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 240,
          "bitWidth": 8,
          "name": "dmi_data_30",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 30",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 248,
          "bitWidth": 8,
          "name": "dmi_data_31",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command data register 31",
          "group": "dmi_data",
          "groupDesc": "abstract command data registers",
          "volatile": true,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "dmi_progbuf_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 0",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "dmi_progbuf_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 1",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "dmi_progbuf_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 2",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "dmi_progbuf_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 3",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "dmi_progbuf_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 4",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "dmi_progbuf_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 5",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "dmi_progbuf_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 6",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "dmi_progbuf_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 7",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "dmi_progbuf_8",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 8",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "dmi_progbuf_9",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 9",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "dmi_progbuf_10",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 10",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "dmi_progbuf_11",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 11",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "dmi_progbuf_12",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 12",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "dmi_progbuf_13",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 13",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "dmi_progbuf_14",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 14",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "dmi_progbuf_15",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 15",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "dmi_progbuf_16",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 16",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "dmi_progbuf_17",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 17",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "dmi_progbuf_18",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 18",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "dmi_progbuf_19",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 19",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "dmi_progbuf_20",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 20",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "dmi_progbuf_21",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 21",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "dmi_progbuf_22",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 22",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "dmi_progbuf_23",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 23",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 192,
          "bitWidth": 8,
          "name": "dmi_progbuf_24",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 24",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 200,
          "bitWidth": 8,
          "name": "dmi_progbuf_25",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 25",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 208,
          "bitWidth": 8,
          "name": "dmi_progbuf_26",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 26",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 216,
          "bitWidth": 8,
          "name": "dmi_progbuf_27",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 27",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 224,
          "bitWidth": 8,
          "name": "dmi_progbuf_28",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 28",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 232,
          "bitWidth": 8,
          "name": "dmi_progbuf_29",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 29",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 240,
          "bitWidth": 8,
          "name": "dmi_progbuf_30",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 30",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 248,
          "bitWidth": 8,
          "name": "dmi_progbuf_31",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 31",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 256,
          "bitWidth": 8,
          "name": "dmi_progbuf_32",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 32",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 264,
          "bitWidth": 8,
          "name": "dmi_progbuf_33",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 33",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 272,
          "bitWidth": 8,
          "name": "dmi_progbuf_34",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 34",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 280,
          "bitWidth": 8,
          "name": "dmi_progbuf_35",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 35",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 288,
          "bitWidth": 8,
          "name": "dmi_progbuf_36",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 36",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 296,
          "bitWidth": 8,
          "name": "dmi_progbuf_37",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 37",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 304,
          "bitWidth": 8,
          "name": "dmi_progbuf_38",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 38",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 312,
          "bitWidth": 8,
          "name": "dmi_progbuf_39",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 39",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 320,
          "bitWidth": 8,
          "name": "dmi_progbuf_40",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 40",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 328,
          "bitWidth": 8,
          "name": "dmi_progbuf_41",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 41",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 336,
          "bitWidth": 8,
          "name": "dmi_progbuf_42",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 42",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 344,
          "bitWidth": 8,
          "name": "dmi_progbuf_43",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 43",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 352,
          "bitWidth": 8,
          "name": "dmi_progbuf_44",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 44",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 360,
          "bitWidth": 8,
          "name": "dmi_progbuf_45",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 45",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 368,
          "bitWidth": 8,
          "name": "dmi_progbuf_46",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 46",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 376,
          "bitWidth": 8,
          "name": "dmi_progbuf_47",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 47",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 384,
          "bitWidth": 8,
          "name": "dmi_progbuf_48",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 48",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 392,
          "bitWidth": 8,
          "name": "dmi_progbuf_49",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 49",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 400,
          "bitWidth": 8,
          "name": "dmi_progbuf_50",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 50",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 408,
          "bitWidth": 8,
          "name": "dmi_progbuf_51",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 51",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 416,
          "bitWidth": 8,
          "name": "dmi_progbuf_52",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 52",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 424,
          "bitWidth": 8,
          "name": "dmi_progbuf_53",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 53",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 432,
          "bitWidth": 8,
          "name": "dmi_progbuf_54",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 54",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 440,
          "bitWidth": 8,
          "name": "dmi_progbuf_55",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 55",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 448,
          "bitWidth": 8,
          "name": "dmi_progbuf_56",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 56",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 456,
          "bitWidth": 8,
          "name": "dmi_progbuf_57",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 57",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 464,
          "bitWidth": 8,
          "name": "dmi_progbuf_58",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 58",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 472,
          "bitWidth": 8,
          "name": "dmi_progbuf_59",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 59",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 480,
          "bitWidth": 8,
          "name": "dmi_progbuf_60",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 60",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 488,
          "bitWidth": 8,
          "name": "dmi_progbuf_61",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 61",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 496,
          "bitWidth": 8,
          "name": "dmi_progbuf_62",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 62",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x80",
          "bitOffset": 504,
          "bitWidth": 8,
          "name": "dmi_progbuf_63",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "abstract command progbuf register 63",
          "group": "dmi_progbuf",
          "groupDesc": "abstract command progbuf registers",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TLDebugModuleInner",
    "regMappingSer": {
      "displayName": "TLDebugModuleInner",
      "deviceName": "TLDebugModuleInner",
      "baseAddress": 0,
      "regFields": [
        {
          "byteOffset": "0x100",
          "bitOffset": 0,
          "bitWidth": 10,
          "name": "debug_hart_halted",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Debug ROM Causes hart to write its hartID here when it is in Debug Mode.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x104",
          "bitOffset": 0,
          "bitWidth": 10,
          "name": "debug_hart_going",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Debug ROM causes hart to write 0 here when it begins executing Debug Mode instructions.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x108",
          "bitOffset": 0,
          "bitWidth": 10,
          "name": "debug_hart_resuming",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Debug ROM causes hart to write its hartID here when it leaves Debug Mode.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10c",
          "bitOffset": 0,
          "bitWidth": 10,
          "name": "debug_hart_exception",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Debug ROM causes hart to write 0 here if it gets an exception in Debug Mode.",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "debug_data_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "Data used to communicate with Debug Module",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "debug_data_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "debug_data_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "debug_data_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "debug_data_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "debug_data_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "debug_data_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "debug_data_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "debug_data_8",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "debug_data_9",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "debug_data_10",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "debug_data_11",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "debug_data_12",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "debug_data_13",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "debug_data_14",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "debug_data_15",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "debug_data_16",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "debug_data_17",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "debug_data_18",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "debug_data_19",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "debug_data_20",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "debug_data_21",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "debug_data_22",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "debug_data_23",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 192,
          "bitWidth": 8,
          "name": "debug_data_24",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 200,
          "bitWidth": 8,
          "name": "debug_data_25",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 208,
          "bitWidth": 8,
          "name": "debug_data_26",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 216,
          "bitWidth": 8,
          "name": "debug_data_27",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 224,
          "bitWidth": 8,
          "name": "debug_data_28",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 232,
          "bitWidth": 8,
          "name": "debug_data_29",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 240,
          "bitWidth": 8,
          "name": "debug_data_30",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x380",
          "bitOffset": 248,
          "bitWidth": 8,
          "name": "debug_data_31",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_data",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "debug_progbuf_0",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "Program buffer used to communicate with Debug Module",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "debug_progbuf_1",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "debug_progbuf_2",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "debug_progbuf_3",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "debug_progbuf_4",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "debug_progbuf_5",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "debug_progbuf_6",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "debug_progbuf_7",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "debug_progbuf_8",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "debug_progbuf_9",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "debug_progbuf_10",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "debug_progbuf_11",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "debug_progbuf_12",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "debug_progbuf_13",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "debug_progbuf_14",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "debug_progbuf_15",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "debug_progbuf_16",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "debug_progbuf_17",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "debug_progbuf_18",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "debug_progbuf_19",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "debug_progbuf_20",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "debug_progbuf_21",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "debug_progbuf_22",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "debug_progbuf_23",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 192,
          "bitWidth": 8,
          "name": "debug_progbuf_24",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 200,
          "bitWidth": 8,
          "name": "debug_progbuf_25",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 208,
          "bitWidth": 8,
          "name": "debug_progbuf_26",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 216,
          "bitWidth": 8,
          "name": "debug_progbuf_27",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 224,
          "bitWidth": 8,
          "name": "debug_progbuf_28",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 232,
          "bitWidth": 8,
          "name": "debug_progbuf_29",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 240,
          "bitWidth": 8,
          "name": "debug_progbuf_30",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 248,
          "bitWidth": 8,
          "name": "debug_progbuf_31",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 256,
          "bitWidth": 8,
          "name": "debug_progbuf_32",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 264,
          "bitWidth": 8,
          "name": "debug_progbuf_33",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 272,
          "bitWidth": 8,
          "name": "debug_progbuf_34",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 280,
          "bitWidth": 8,
          "name": "debug_progbuf_35",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 288,
          "bitWidth": 8,
          "name": "debug_progbuf_36",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 296,
          "bitWidth": 8,
          "name": "debug_progbuf_37",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 304,
          "bitWidth": 8,
          "name": "debug_progbuf_38",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 312,
          "bitWidth": 8,
          "name": "debug_progbuf_39",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 320,
          "bitWidth": 8,
          "name": "debug_progbuf_40",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 328,
          "bitWidth": 8,
          "name": "debug_progbuf_41",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 336,
          "bitWidth": 8,
          "name": "debug_progbuf_42",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 344,
          "bitWidth": 8,
          "name": "debug_progbuf_43",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 352,
          "bitWidth": 8,
          "name": "debug_progbuf_44",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 360,
          "bitWidth": 8,
          "name": "debug_progbuf_45",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 368,
          "bitWidth": 8,
          "name": "debug_progbuf_46",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 376,
          "bitWidth": 8,
          "name": "debug_progbuf_47",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 384,
          "bitWidth": 8,
          "name": "debug_progbuf_48",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 392,
          "bitWidth": 8,
          "name": "debug_progbuf_49",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 400,
          "bitWidth": 8,
          "name": "debug_progbuf_50",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 408,
          "bitWidth": 8,
          "name": "debug_progbuf_51",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 416,
          "bitWidth": 8,
          "name": "debug_progbuf_52",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 424,
          "bitWidth": 8,
          "name": "debug_progbuf_53",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 432,
          "bitWidth": 8,
          "name": "debug_progbuf_54",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 440,
          "bitWidth": 8,
          "name": "debug_progbuf_55",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 448,
          "bitWidth": 8,
          "name": "debug_progbuf_56",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 456,
          "bitWidth": 8,
          "name": "debug_progbuf_57",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 464,
          "bitWidth": 8,
          "name": "debug_progbuf_58",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 472,
          "bitWidth": 8,
          "name": "debug_progbuf_59",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 480,
          "bitWidth": 8,
          "name": "debug_progbuf_60",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 488,
          "bitWidth": 8,
          "name": "debug_progbuf_61",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 496,
          "bitWidth": 8,
          "name": "debug_progbuf_62",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x340",
          "bitOffset": 504,
          "bitWidth": 8,
          "name": "debug_progbuf_63",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_progbuf",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x300",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "debug_whereto",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Instruction filled in by Debug Module to control hart in Debug Mode",
          "group": "None",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x338",
          "bitOffset": 0,
          "bitWidth": 32,
          "name": "debug_abstract_0",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_abstract",
          "groupDesc": "Instructions generated by Debug Module",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x338",
          "bitOffset": 32,
          "bitWidth": 32,
          "name": "debug_abstract_1",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_abstract",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x400",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "debug_flags_0",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_flags",
          "groupDesc": "Memory region used to control hart going/resuming in Debug Mode",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x400",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "debug_flags_1",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_flags",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x400",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "debug_flags_2",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_flags",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x400",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "debug_flags_3",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_flags",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "debug_rom_0",
          "resetValue": 111,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "Debug ROM",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 8,
          "bitWidth": 8,
          "name": "debug_rom_1",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 16,
          "bitWidth": 8,
          "name": "debug_rom_2",
          "resetValue": -64,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 24,
          "bitWidth": 8,
          "name": "debug_rom_3",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 32,
          "bitWidth": 8,
          "name": "debug_rom_4",
          "resetValue": 111,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 40,
          "bitWidth": 8,
          "name": "debug_rom_5",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 48,
          "bitWidth": 8,
          "name": "debug_rom_6",
          "resetValue": -128,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 56,
          "bitWidth": 8,
          "name": "debug_rom_7",
          "resetValue": 3,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 64,
          "bitWidth": 8,
          "name": "debug_rom_8",
          "resetValue": 111,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 72,
          "bitWidth": 8,
          "name": "debug_rom_9",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 80,
          "bitWidth": 8,
          "name": "debug_rom_10",
          "resetValue": 64,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 88,
          "bitWidth": 8,
          "name": "debug_rom_11",
          "resetValue": 4,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 96,
          "bitWidth": 8,
          "name": "debug_rom_12",
          "resetValue": 15,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 104,
          "bitWidth": 8,
          "name": "debug_rom_13",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 112,
          "bitWidth": 8,
          "name": "debug_rom_14",
          "resetValue": -16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 120,
          "bitWidth": 8,
          "name": "debug_rom_15",
          "resetValue": 15,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 128,
          "bitWidth": 8,
          "name": "debug_rom_16",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 136,
          "bitWidth": 8,
          "name": "debug_rom_17",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 144,
          "bitWidth": 8,
          "name": "debug_rom_18",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 152,
          "bitWidth": 8,
          "name": "debug_rom_19",
          "resetValue": 123,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 160,
          "bitWidth": 8,
          "name": "debug_rom_20",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 168,
          "bitWidth": 8,
          "name": "debug_rom_21",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 176,
          "bitWidth": 8,
          "name": "debug_rom_22",
          "resetValue": 64,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 184,
          "bitWidth": 8,
          "name": "debug_rom_23",
          "resetValue": -15,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 192,
          "bitWidth": 8,
          "name": "debug_rom_24",
          "resetValue": 35,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 200,
          "bitWidth": 8,
          "name": "debug_rom_25",
          "resetValue": 32,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 208,
          "bitWidth": 8,
          "name": "debug_rom_26",
          "resetValue": -128,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 216,
          "bitWidth": 8,
          "name": "debug_rom_27",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 224,
          "bitWidth": 8,
          "name": "debug_rom_28",
          "resetValue": 3,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 232,
          "bitWidth": 8,
          "name": "debug_rom_29",
          "resetValue": 68,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 240,
          "bitWidth": 8,
          "name": "debug_rom_30",
          "resetValue": 4,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 248,
          "bitWidth": 8,
          "name": "debug_rom_31",
          "resetValue": 64,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 256,
          "bitWidth": 8,
          "name": "debug_rom_32",
          "resetValue": 19,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 264,
          "bitWidth": 8,
          "name": "debug_rom_33",
          "resetValue": 116,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 272,
          "bitWidth": 8,
          "name": "debug_rom_34",
          "resetValue": 52,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 280,
          "bitWidth": 8,
          "name": "debug_rom_35",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 288,
          "bitWidth": 8,
          "name": "debug_rom_36",
          "resetValue": -29,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 296,
          "bitWidth": 8,
          "name": "debug_rom_37",
          "resetValue": 8,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 304,
          "bitWidth": 8,
          "name": "debug_rom_38",
          "resetValue": 4,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 312,
          "bitWidth": 8,
          "name": "debug_rom_39",
          "resetValue": -2,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 320,
          "bitWidth": 8,
          "name": "debug_rom_40",
          "resetValue": 19,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 328,
          "bitWidth": 8,
          "name": "debug_rom_41",
          "resetValue": 116,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 336,
          "bitWidth": 8,
          "name": "debug_rom_42",
          "resetValue": 20,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 344,
          "bitWidth": 8,
          "name": "debug_rom_43",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 352,
          "bitWidth": 8,
          "name": "debug_rom_44",
          "resetValue": 99,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 360,
          "bitWidth": 8,
          "name": "debug_rom_45",
          "resetValue": 8,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 368,
          "bitWidth": 8,
          "name": "debug_rom_46",
          "resetValue": 4,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 376,
          "bitWidth": 8,
          "name": "debug_rom_47",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 384,
          "bitWidth": 8,
          "name": "debug_rom_48",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 392,
          "bitWidth": 8,
          "name": "debug_rom_49",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 400,
          "bitWidth": 8,
          "name": "debug_rom_50",
          "resetValue": 32,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 408,
          "bitWidth": 8,
          "name": "debug_rom_51",
          "resetValue": 123,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 416,
          "bitWidth": 8,
          "name": "debug_rom_52",
          "resetValue": 35,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 424,
          "bitWidth": 8,
          "name": "debug_rom_53",
          "resetValue": 34,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 432,
          "bitWidth": 8,
          "name": "debug_rom_54",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 440,
          "bitWidth": 8,
          "name": "debug_rom_55",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 448,
          "bitWidth": 8,
          "name": "debug_rom_56",
          "resetValue": 103,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 456,
          "bitWidth": 8,
          "name": "debug_rom_57",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 464,
          "bitWidth": 8,
          "name": "debug_rom_58",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 472,
          "bitWidth": 8,
          "name": "debug_rom_59",
          "resetValue": 48,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 480,
          "bitWidth": 8,
          "name": "debug_rom_60",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 488,
          "bitWidth": 8,
          "name": "debug_rom_61",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 496,
          "bitWidth": 8,
          "name": "debug_rom_62",
          "resetValue": 64,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 504,
          "bitWidth": 8,
          "name": "debug_rom_63",
          "resetValue": -15,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 512,
          "bitWidth": 8,
          "name": "debug_rom_64",
          "resetValue": 35,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 520,
          "bitWidth": 8,
          "name": "debug_rom_65",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 528,
          "bitWidth": 8,
          "name": "debug_rom_66",
          "resetValue": -128,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 536,
          "bitWidth": 8,
          "name": "debug_rom_67",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 544,
          "bitWidth": 8,
          "name": "debug_rom_68",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 552,
          "bitWidth": 8,
          "name": "debug_rom_69",
          "resetValue": 36,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 560,
          "bitWidth": 8,
          "name": "debug_rom_70",
          "resetValue": 32,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 568,
          "bitWidth": 8,
          "name": "debug_rom_71",
          "resetValue": 123,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 576,
          "bitWidth": 8,
          "name": "debug_rom_72",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 584,
          "bitWidth": 8,
          "name": "debug_rom_73",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 592,
          "bitWidth": 8,
          "name": "debug_rom_74",
          "resetValue": 32,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 600,
          "bitWidth": 8,
          "name": "debug_rom_75",
          "resetValue": 123,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 608,
          "bitWidth": 8,
          "name": "debug_rom_76",
          "resetValue": 35,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 616,
          "bitWidth": 8,
          "name": "debug_rom_77",
          "resetValue": 38,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 624,
          "bitWidth": 8,
          "name": "debug_rom_78",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 632,
          "bitWidth": 8,
          "name": "debug_rom_79",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 640,
          "bitWidth": 8,
          "name": "debug_rom_80",
          "resetValue": 115,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 648,
          "bitWidth": 8,
          "name": "debug_rom_81",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 656,
          "bitWidth": 8,
          "name": "debug_rom_82",
          "resetValue": 16,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x800",
          "bitOffset": 664,
          "bitWidth": 8,
          "name": "debug_rom_83",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "debug_rom",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_6"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_23"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_24.nodeIn.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_24.nodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_24.auto.out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_24.auto.in.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_24"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_7"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_25"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_26.nodeIn.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_26.nodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_26.auto.out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_26.auto.in.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_26"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_8"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_27"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_28.nodeIn.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_28.nodeOut.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_28.auto.out.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.BundleBridgeNexus_28.auto.in.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.BundleBridgeNexus_28"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_127",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_128",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLXbar_15"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_129",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_130",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.SRAMAnnotation",
    "target": "TestHarness.TLRAM.mem",
    "address_width": 13,
    "name": "mem",
    "data_width": 64,
    "depth": 8192,
    "description": "mem",
    "write_mask_granularity": 8
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_131",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_132",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_20"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.TLBuffer_21"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_133",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_134",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_135",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_136",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TLUART",
    "regMappingSer": {
      "displayName": "TLUART",
      "deviceName": "TLUART",
      "baseAddress": 268566528,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "data",
          "resetValue": 0,
          "accessType": "W",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit data",
          "group": "txdata",
          "groupDesc": "Transmit data",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 8,
          "bitWidth": 23,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "txdata",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x0",
          "bitOffset": 31,
          "bitWidth": 1,
          "name": "full",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit FIFO full",
          "group": "txdata",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4",
          "bitOffset": 0,
          "bitWidth": 8,
          "name": "data",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive data",
          "group": "rxdata",
          "groupDesc": "Receive data",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4",
          "bitOffset": 8,
          "bitWidth": 23,
          "name": "reserved",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "",
          "group": "rxdata",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4",
          "bitOffset": 31,
          "bitWidth": 1,
          "name": "empty",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive FIFO empty",
          "group": "rxdata",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "txen",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit enable",
          "group": "txctrl",
          "groupDesc": "Serial transmit control",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "nstop",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Number of stop bits",
          "group": "txctrl",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "rxen",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive enable",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xa",
          "bitOffset": 0,
          "bitWidth": 9,
          "name": "txcnt",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit watermark level",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0xe",
          "bitOffset": 0,
          "bitWidth": 9,
          "name": "rxcnt",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive watermark level",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "txwm_ie",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit watermark interrupt enable",
          "group": "ie",
          "groupDesc": "Serial interrupt enable",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x10",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "rxwm_ie",
          "resetValue": 0,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive watermark interrupt enable",
          "group": "ie",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        },
        {
          "byteOffset": "0x14",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "txwm_ip",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Transmit watermark interrupt pending",
          "group": "ip",
          "groupDesc": "Serial interrupt pending",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x14",
          "bitOffset": 1,
          "bitWidth": 1,
          "name": "rxwm_ip",
          "resetValue": 0,
          "accessType": "R",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Receive watermark interrupt pending",
          "group": "ip",
          "groupDesc": "None",
          "volatile": true,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x18",
          "bitOffset": 0,
          "bitWidth": 16,
          "name": "div",
          "resetValue": 4340,
          "accessType": "RW",
          "wrType": "None",
          "rdAction": "None",
          "desc": "Baud rate divisor",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": true,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_137",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_138",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_139",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_140",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.EICG_wrapper",
    "name": "EICG_wrapper.v",
    "text": "/* verilator lint_off UNOPTFLAT */\n\nmodule EICG_wrapper(\n  output out,\n  input en,\n  input test_en,\n  input in\n);\n\n  reg en_latched /*verilator clock_enable*/;\n\n  always @(*) begin\n     if (!in) begin\n        en_latched = en || test_en;\n     end\n  end\n\n  assign out = en_latched && in;\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.EICG_wrapper_1",
    "name": "EICG_wrapper.v",
    "text": "/* verilator lint_off UNOPTFLAT */\n\nmodule EICG_wrapper(\n  output out,\n  input en,\n  input test_en,\n  input in\n);\n\n  reg en_latched /*verilator clock_enable*/;\n\n  always @(*) begin\n     if (!in) begin\n        en_latched = en || test_en;\n     end\n  end\n\n  assign out = en_latched && in;\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.EICG_wrapper_2",
    "name": "EICG_wrapper.v",
    "text": "/* verilator lint_off UNOPTFLAT */\n\nmodule EICG_wrapper(\n  output out,\n  input en,\n  input test_en,\n  input in\n);\n\n  reg en_latched /*verilator clock_enable*/;\n\n  always @(*) begin\n     if (!in) begin\n        en_latched = en || test_en;\n     end\n  end\n\n  assign out = en_latched && in;\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TileClockGater",
    "regMappingSer": {
      "displayName": "TileClockGater",
      "deviceName": "TileClockGater",
      "baseAddress": 1048576,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField0_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField4_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField8_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0xc",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegFieldc_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_141",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_142",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_143",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_144",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "freechips.rocketchip.util.RegFieldDescMappingAnnotation",
    "target": "TestHarness.TileResetSetter",
    "regMappingSer": {
      "displayName": "TileResetSetter",
      "deviceName": "TileResetSetter",
      "baseAddress": 1114112,
      "regFields": [
        {
          "byteOffset": "0x0",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField0_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x4",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField4_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        },
        {
          "byteOffset": "0x8",
          "bitOffset": 0,
          "bitWidth": 1,
          "name": "unnamedRegField8_0",
          "resetValue": 0,
          "accessType": "None",
          "wrType": "None",
          "rdAction": "None",
          "desc": "None",
          "group": "None",
          "groupDesc": "None",
          "volatile": false,
          "hasReset": false,
          "enumerations": {}
        }
      ]
    }
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_145",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_146",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.passes.InlineAnnotation",
    "target": "TestHarness.ClockGroup_9"
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.DigitalTop.traceCoreNodesIn.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.DigitalTop.traceCoreNodesIn_1.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "chisel3.experimental.EnumAnnotations$EnumVecAnnotation",
    "target": "TestHarness.DigitalTop.traceCoreNodesIn_2.group",
    "typeName": "freechips.rocketchip.util.TraceItype",
    "fields": [
      [
        "itype"
      ]
    ]
  },
  {
    "class": "freechips.rocketchip.util.AddressMapAnnotation",
    "target": "TestHarness.DigitalTop",
    "mapping": [
      {
        "range": {
          "base": 0,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": false,
          "a": true
        },
        "names": [
          "debug-controller@0"
        ]
      },
      {
        "range": {
          "base": 4096,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "boot-address-reg@1000"
        ]
      },
      {
        "range": {
          "base": 12288,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": false,
          "a": true
        },
        "names": [
          "error-device@3000"
        ]
      },
      {
        "range": {
          "base": 65536,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": false,
          "x": true,
          "c": false,
          "a": false
        },
        "names": [
          "rom@10000"
        ]
      },
      {
        "range": {
          "base": 1048576,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "clock-gater@100000"
        ]
      },
      {
        "range": {
          "base": 1114112,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "tile-reset-setter@110000"
        ]
      },
      {
        "range": {
          "base": 33554432,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "clint@2000000"
        ]
      },
      {
        "range": {
          "base": 33619968,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "cache-controller@2010000"
        ]
      },
      {
        "range": {
          "base": 134217728,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": true,
          "a": true
        },
        "names": [
          "memory@8000000"
        ]
      },
      {
        "range": {
          "base": 201326592,
          "size": 67108864
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "interrupt-controller@c000000"
        ]
      },
      {
        "range": {
          "base": 268566528,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "serial@10020000"
        ]
      },
      {
        "range": {
          "base": 2147483648,
          "size": 268435456
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": true,
          "a": true
        },
        "names": [
          "memory@80000000"
        ]
      }
    ],
    "label": "mapping"
  },
  {
    "class": "freechips.rocketchip.util.AddressMapAnnotation",
    "target": "TestHarness.DigitalTop",
    "mapping": [
      {
        "range": {
          "base": 0,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": false,
          "a": true
        },
        "names": [
          "debug-controller@0"
        ]
      },
      {
        "range": {
          "base": 4096,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "boot-address-reg@1000"
        ]
      },
      {
        "range": {
          "base": 12288,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": false,
          "a": true
        },
        "names": [
          "error-device@3000"
        ]
      },
      {
        "range": {
          "base": 65536,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": false,
          "x": true,
          "c": false,
          "a": false
        },
        "names": [
          "rom@10000"
        ]
      },
      {
        "range": {
          "base": 1048576,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "clock-gater@100000"
        ]
      },
      {
        "range": {
          "base": 1114112,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "tile-reset-setter@110000"
        ]
      },
      {
        "range": {
          "base": 33554432,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "clint@2000000"
        ]
      },
      {
        "range": {
          "base": 33619968,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "cache-controller@2010000"
        ]
      },
      {
        "range": {
          "base": 134217728,
          "size": 65536
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": true,
          "a": true
        },
        "names": [
          "memory@8000000"
        ]
      },
      {
        "range": {
          "base": 201326592,
          "size": 67108864
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "interrupt-controller@c000000"
        ]
      },
      {
        "range": {
          "base": 268566528,
          "size": 4096
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": false,
          "c": false,
          "a": true
        },
        "names": [
          "serial@10020000"
        ]
      },
      {
        "range": {
          "base": 2147483648,
          "size": 268435456
        },
        "permissions": {
          "r": true,
          "w": true,
          "x": true,
          "c": true,
          "a": true
        },
        "names": [
          "memory@80000000"
        ]
      }
    ],
    "label": "mapping"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.EICG_wrapper_3",
    "name": "EICG_wrapper.v",
    "text": "/* verilator lint_off UNOPTFLAT */\n\nmodule EICG_wrapper(\n  output out,\n  input en,\n  input test_en,\n  input in\n);\n\n  reg en_latched /*verilator clock_enable*/;\n\n  always @(*) begin\n     if (!in) begin\n        en_latched = en || test_en;\n     end\n  end\n\n  assign out = en_latched && in;\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_1",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_2",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_3",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_1",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_4",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_2",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_3",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_4",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_5",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_6",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_7",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_8",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_9",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_10",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_11",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_12",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_13",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_14",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_15",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_16",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_17",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_18",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_19",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_20",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_21",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_22",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_23",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_24",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_25",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_26",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_27",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_28",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_29",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_30",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_31",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_32",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_33",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_34",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_5",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_6",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_7",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_8",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_9",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_10",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_11",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_12",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_13",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_14",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_15",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_16",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_17",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_18",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_19",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_20",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_21",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_22",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_23",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_24",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_25",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_26",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_27",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_28",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_29",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_30",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_31",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_32",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_33",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_34",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_35",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_36",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_37",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_38",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_35",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalInIOCell_39",
    "name": "GenericDigitalInIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalInIOCell(\n    input pad,\n    output i,\n    input ie\n);\n\n    assign i = ie ? pad : 1'b0;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.GenericDigitalOutIOCell_36",
    "name": "GenericDigitalOutIOCell.v",
    "text": "\n`timescale 1ns/1ps\nmodule GenericDigitalOutIOCell(\n    output pad,\n    input o,\n    input oe\n);\n\n    assign pad = oe ? o : 1'bz;\n\nendmodule"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "SimDRAM.v",
    "text": "import \"DPI-C\" function chandle memory_init\n(\n  input int chip_id,\n  input longint mem_size,\n  input longint word_size,\n  input longint line_size,\n  input longint id_bits,\n  input longint clock_hz,\n  input longint mem_base\n);\n\nimport \"DPI-C\" function void memory_tick\n(\n  input chandle  channel,\n\n  input bit      reset,\n\n  input bit      ar_valid,\n  output bit     ar_ready,\n  input longint  ar_addr,\n  input int      ar_id,\n  input int      ar_size,\n  input int      ar_len,\n\n  input bit      aw_valid,\n  output bit     aw_ready,\n  input longint  aw_addr,\n  input int      aw_id,\n  input int      aw_size,\n  input int      aw_len,\n\n  input bit      w_valid,\n  output bit     w_ready,\n  input int      w_strb,\n  input longint  w_data,\n  input bit      w_last,\n\n  output bit     r_valid,\n  input bit      r_ready,\n  output int     r_id,\n  output int     r_resp,\n  output longint r_data,\n  output bit     r_last,\n\n  output bit     b_valid,\n  input bit      b_ready,\n  output int     b_id,\n  output int     b_resp\n);\n\nmodule SimDRAM #(\n    parameter ADDR_BITS=32, DATA_BITS = 64, ID_BITS = 5,\n              MEM_SIZE = 1000 * 1000 * 1000,\n              LINE_SIZE = 64,\n              WORD_SIZE = DATA_BITS/8,\n              CLOCK_HZ = 100000,\n              STRB_BITS = DATA_BITS/8,\n              MEM_BASE = 0,\n              CHIP_ID = 0)(\n  input                  clock,\n  input                  reset,\n  output                 axi_aw_ready,\n  input                  axi_aw_valid,\n  input  [ADDR_BITS-1:0] axi_aw_bits_addr,\n  input  [7:0]           axi_aw_bits_len,\n  input  [2:0]           axi_aw_bits_size,\n  input  [1:0]           axi_aw_bits_burst,\n  input                  axi_aw_bits_lock,\n  input  [3:0]           axi_aw_bits_cache,\n  input  [2:0]           axi_aw_bits_prot,\n  input  [3:0]           axi_aw_bits_qos,\n  input  [ID_BITS-1:0]   axi_aw_bits_id,\n  output                 axi_w_ready,\n  input                  axi_w_valid,\n  input  [DATA_BITS-1:0] axi_w_bits_data,\n  input                  axi_w_bits_last,\n  input  [STRB_BITS-1:0] axi_w_bits_strb,\n  input                  axi_b_ready,\n  output                 axi_b_valid,\n  output [1:0]           axi_b_bits_resp,\n  output [ID_BITS-1:0]   axi_b_bits_id,\n  output                 axi_ar_ready,\n  input                  axi_ar_valid,\n  input  [ADDR_BITS-1:0] axi_ar_bits_addr,\n  input  [7:0]           axi_ar_bits_len,\n  input  [2:0]           axi_ar_bits_size,\n  input  [1:0]           axi_ar_bits_burst,\n  input                  axi_ar_bits_lock,\n  input  [3:0]           axi_ar_bits_cache,\n  input  [2:0]           axi_ar_bits_prot,\n  input  [3:0]           axi_ar_bits_qos,\n  input  [ID_BITS-1:0]   axi_ar_bits_id,\n  input                  axi_r_ready,\n  output                 axi_r_valid,\n  output [1:0]           axi_r_bits_resp,\n  output [DATA_BITS-1:0] axi_r_bits_data,\n  output                 axi_r_bits_last,\n  output [ID_BITS-1:0]   axi_r_bits_id\n);\n\n  reg initialized = 1'b0;\n  chandle channel;\n\n  wire __ar_valid;\n  wire [63:0] __ar_addr;\n  wire [31:0] __ar_id;\n  wire [31:0] __ar_size;\n  wire [31:0] __ar_len;\n\n  wire __aw_valid;\n  wire [63:0] __aw_addr;\n  wire [31:0] __aw_id;\n  wire [31:0] __aw_size;\n  wire [31:0] __aw_len;\n\n  wire __w_valid;\n  wire [31:0] __w_strb;\n  wire [63:0] __w_data;\n  wire        __w_last;\n\n  wire __r_ready;\n  wire __b_ready;\n\n  bit __ar_ready;\n  bit __aw_ready;\n  bit __w_ready;\n  bit __r_valid;\n  int __r_id;\n  int __r_resp;\n  longint __r_data;\n  bit __r_last;\n  bit __b_valid;\n  int __b_id;\n  int __b_resp;\n\n  reg __ar_ready_reg;\n  reg __aw_ready_reg;\n  reg __w_ready_reg;\n  reg __r_valid_reg;\n  reg [ID_BITS-1:0] __r_id_reg;\n  reg [1:0] __r_resp_reg;\n  reg [DATA_BITS-1:0] __r_data_reg;\n  reg __r_last_reg;\n  reg __b_valid_reg;\n  reg [ID_BITS-1:0] __b_id_reg;\n  reg [1:0] __b_resp_reg;\n\n  always @(posedge clock) begin\n    if (reset) begin\n      __ar_ready = 1'b0;\n      __aw_ready = 1'b0;\n      __w_ready  = 1'b0;\n      __r_valid  = 1'b0;\n      __b_valid  = 1'b0;\n\n      __ar_ready_reg <= 1'b0;\n      __aw_ready_reg <= 1'b0;\n      __w_ready_reg  <= 1'b0;\n      __r_valid_reg  <= 1'b0;\n      __b_valid_reg  <= 1'b0;\n    end else begin\n      if (!initialized) begin\n        channel = memory_init(CHIP_ID, MEM_SIZE, WORD_SIZE, LINE_SIZE, ID_BITS, CLOCK_HZ, MEM_BASE);\n        initialized = 1'b1;\n      end\n\n      memory_tick(\n        channel,\n\n        reset,\n\n        __ar_valid,\n        __ar_ready,\n        __ar_addr,\n        __ar_id,\n        __ar_size,\n        __ar_len,\n\n        __aw_valid,\n        __aw_ready,\n        __aw_addr,\n        __aw_id,\n        __aw_size,\n        __aw_len,\n\n        __w_valid,\n        __w_ready,\n        __w_strb,\n        __w_data,\n        __w_last,\n\n        __r_valid,\n        __r_ready,\n        __r_id,\n        __r_resp,\n        __r_data,\n        __r_last,\n\n        __b_valid,\n        __b_ready,\n        __b_id,\n        __b_resp);\n\n        __ar_ready_reg <= __ar_ready;\n        __aw_ready_reg <= __aw_ready;\n        __w_ready_reg  <= __w_ready;\n\n        __r_valid_reg <= __r_valid;\n        __r_id_reg    <= __r_id[ID_BITS-1:0];\n        __r_resp_reg  <= __r_resp[1:0];\n        __r_data_reg  <= __r_data;\n        __r_last_reg  <= __r_last;\n\n        __b_valid_reg <= __b_valid;\n        __b_id_reg    <= __b_id[ID_BITS-1:0];\n        __b_resp_reg  <= __b_resp[1:0];\n    end\n  end\n\n  /* verilator lint_off WIDTH */\n\n  assign __ar_valid = axi_ar_valid;\n  assign __ar_addr  = axi_ar_bits_addr;\n  assign __ar_id    = axi_ar_bits_id;\n  assign __ar_size  = axi_ar_bits_size;\n  assign __ar_len   = axi_ar_bits_len;\n\n  assign __aw_valid = axi_aw_valid;\n  assign __aw_addr  = axi_aw_bits_addr;\n  assign __aw_id    = axi_aw_bits_id;\n  assign __aw_size  = axi_aw_bits_size;\n  assign __aw_len   = axi_aw_bits_len;\n\n  assign __w_valid = axi_w_valid;\n  assign __w_strb  = axi_w_bits_strb;\n  assign __w_data  = axi_w_bits_data;\n  assign __w_last  = axi_w_bits_last;\n\n  assign __r_ready = axi_r_ready;\n  assign __b_ready = axi_b_ready;\n\n  assign axi_ar_ready = __ar_ready_reg;\n  assign axi_aw_ready = __aw_ready_reg;\n  assign axi_w_ready = __w_ready_reg;\n  assign axi_r_valid = __r_valid_reg;\n  assign axi_r_bits_id = __r_id_reg;\n  assign axi_r_bits_resp = __r_resp_reg;\n  assign axi_r_bits_data = __r_data_reg;\n  assign axi_r_bits_last = __r_last_reg;\n  assign axi_b_valid = __b_valid_reg;\n  assign axi_b_bits_id = __b_id_reg;\n  assign axi_b_bits_resp = __b_resp_reg;\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "SimDRAM.cc",
    "text": "#include <vpi_user.h>\n#include <svdpi.h>\n#include <stdint.h>\n#include <cassert>\n#include <sys/mman.h>\n#include <fesvr/memif.h>\n#include <fesvr/elfloader.h>\n\n#include \"mm_dramsim2.h\"\n\nbool use_dramsim = false;\nstd::string ini_dir = \"dramsim2_ini\";\nstd::string loadmem_file = \"\";\nstd::vector<std::map<long long int, backing_data_t>> backing_mem_data = {};\n\n// TODO FIX: This doesn't properly handle striped memory across multiple channels\n// The full memory range is duplicated across each channel\nextern \"C\" void *memory_init(\n                             int chip_id,\n                             long long int mem_size,\n                             long long int word_size,\n                             long long int line_size,\n                             long long int id_bits,\n                             long long int clock_hz,\n                             long long int mem_base\n\t\t\t     )\n{\n    mm_t *mm;\n    s_vpi_vlog_info info;\n\n    std::string memory_ini = \"DDR3_micron_64M_8B_x4_sg15.ini\";\n    std::string system_ini = \"system.ini\";\n    std::string ini_dir = \"dramsim2_ini\";\n\n    if (!vpi_get_vlog_info(&info))\n      abort();\n\n    for (int i = 1; i < info.argc; i++) {\n      std::string arg(info.argv[i]);\n\n      if (arg == \"+dramsim\")\n        use_dramsim = true;\n      if (arg.find(\"+dramsim_ini_dir=\") == 0)\n        ini_dir = arg.substr(strlen(\"+dramsim_ini_dir=\"));\n      if (arg.find(\"+loadmem=\") == 0)\n        loadmem_file = arg.substr(strlen(\"+loadmem=\"));\n    }\n\n    while (chip_id >= backing_mem_data.size()) {\n      backing_mem_data.push_back(std::map<long long int, backing_data_t>());\n    }\n\n    if (backing_mem_data[chip_id].find(mem_base) != backing_mem_data[chip_id].end()) {\n      assert(backing_mem_data[chip_id][mem_base].size == mem_size);\n    } else {\n      uint8_t* data = (uint8_t*) mmap(NULL, mem_size, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n\n      class loadmem_memif_t : public memif_t {\n      public:\n        loadmem_memif_t(uint8_t* _data, size_t _start) : memif_t(nullptr), data(_data), start(_start) {}\n        void write(addr_t taddr, size_t len, const void* src) override\n        {\n          addr_t addr = taddr - start;\n          memcpy(data + addr, src, len);\n        }\n        void read(addr_t taddr, size_t len, void* bytes) override {\n          assert(false);\n        }\n        endianness_t get_target_endianness() const override {\n          return endianness_little;\n        }\n      private:\n        uint8_t* data;\n        size_t start;\n      } loadmem_memif(data, mem_base);\n      if (loadmem_file != \"\") {\n        reg_t entry;\n        load_elf(loadmem_file.c_str(), &loadmem_memif, &entry);\n      }\n\n      backing_mem_data[chip_id][mem_base] = {data, mem_size};\n    }\n\n    if (use_dramsim)\n      mm = (mm_t *) (new mm_dramsim2_t(mem_base, mem_size, word_size, line_size,\n                                       backing_mem_data[chip_id][mem_base],\n                                       memory_ini, system_ini, ini_dir,\n                                       1 << id_bits, clock_hz));\n    else\n      mm = (mm_t *) (new mm_magic_t(mem_base, mem_size, word_size, line_size,\n                                    backing_mem_data[chip_id][mem_base]));\n\n\n    return mm;\n}\n\nextern \"C\" void memory_tick(\n        void *channel,\n\n        unsigned char reset,\n\n        unsigned char ar_valid,\n        unsigned char *ar_ready,\n        long long int ar_addr,\n        int ar_id,\n        int ar_size,\n        int ar_len,\n\n        unsigned char aw_valid,\n        unsigned char *aw_ready,\n        long long int aw_addr,\n        int aw_id,\n        int aw_size,\n        int aw_len,\n\n        unsigned char w_valid,\n        unsigned char *w_ready,\n        int w_strb,\n        long long w_data,\n        unsigned char w_last,\n\n        unsigned char *r_valid,\n        unsigned char r_ready,\n        int *r_id,\n        int *r_resp,\n        long long *r_data,\n        unsigned char *r_last,\n\n        unsigned char *b_valid,\n        unsigned char b_ready,\n        int *b_id,\n        int *b_resp)\n{\n    mm_t *mm = (mm_t *) channel;\n\n    mm->tick(\n        reset,\n\n        ar_valid,\n        ar_addr,\n        ar_id,\n        ar_size,\n        ar_len,\n\n        aw_valid,\n        aw_addr,\n        aw_id,\n        aw_size,\n        aw_len,\n\n        w_valid,\n        w_strb,\n        &w_data,\n        w_last,\n\n        r_ready,\n        b_ready);\n\n    *ar_ready = mm->ar_ready();\n    *aw_ready = mm->aw_ready();\n    *w_ready = mm->w_ready();\n    *r_valid = mm->r_valid();\n    *r_id = mm->r_id();\n    *r_resp = mm->r_resp();\n    *r_data = *((long *) mm->r_data());\n    *r_last = mm->r_last();\n    *b_valid = mm->b_valid();\n    *b_id = mm->b_id();\n    *b_resp = mm->b_resp();\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "mm.cc",
    "text": "// See LICENSE for license details.\n\n#include \"mm.h\"\n#include <iostream>\n#include <fstream>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <sys/mman.h>\n#include <fesvr/memif.h>\n#include <fesvr/elfloader.h>\n\nvoid mm_t::write(uint64_t faddr, uint8_t *data, uint64_t strb, uint64_t size)\n{\n  uint64_t addr = faddr - this->mem_base;\n  assert(addr < this->mem_size);\n  auto max_strb_bytes = sizeof(uint64_t) * 8;\n  assert(size <= max_strb_bytes); // Ensure the strb is wide enough to support the desired transaction\n  if (size != max_strb_bytes) {\n    strb &= ((1 << size) - 1) << (addr % word_size);\n  }\n\n  uint8_t *base = this->data + (addr / word_size) * word_size;\n  for (int i = 0; i < word_size; i++) {\n    if (strb & 1)\n      base[i] = data[i];\n    strb >>= 1;\n  }\n}\n\nstd::vector<char> mm_t::read(uint64_t faddr)\n{\n  uint64_t addr = faddr - this->mem_base;\n  assert(addr < this->mem_size);\n  uint8_t *base = this->data + addr;\n  return std::vector<char>(base, base + word_size);\n}\n\nmm_t::~mm_t()\n{\n  munmap(data, this->mem_size);\n}\n\nvoid mm_magic_t::tick(\n  bool reset,\n\n  bool ar_valid,\n  uint64_t ar_addr,\n  uint64_t ar_id,\n  uint64_t ar_size,\n  uint64_t ar_len,\n\n  bool aw_valid,\n  uint64_t aw_addr,\n  uint64_t aw_id,\n  uint64_t aw_size,\n  uint64_t aw_len,\n\n  bool w_valid,\n  uint64_t w_strb,\n  void *w_data,\n  bool w_last,\n\n  bool r_ready,\n  bool b_ready)\n{\n  bool ar_fire = !reset && ar_valid && ar_ready();\n  bool aw_fire = !reset && aw_valid && aw_ready();\n  bool w_fire  = !reset && w_valid && w_ready();\n  bool r_fire  = !reset && r_valid() && r_ready;\n  bool b_fire  = !reset && b_valid() && b_ready;\n\n  if (ar_fire) {\n    uint64_t start_addr = (ar_addr / word_size) * word_size;\n    for (int i = 0; i <= ar_len; i++) {\n      auto dat = read(start_addr + i * word_size);\n      rresp.push(mm_rresp_t(ar_id, dat, i == ar_len));\n    }\n  }\n\n  if (aw_fire) {\n    store_addr = aw_addr;\n    store_id = aw_id;\n    store_count = aw_len + 1;\n    store_size = 1 << aw_size;\n    store_inflight = true;\n  }\n\n  if (w_fire) {\n    write(store_addr, (uint8_t *) w_data, w_strb, store_size);\n    store_addr += store_size;\n    store_count--;\n\n    if (store_count == 0) {\n      store_inflight = false;\n      bresp.push(store_id);\n      assert(w_last);\n    }\n  }\n\n  if (b_fire)\n    bresp.pop();\n\n  if (r_fire)\n    rresp.pop();\n\n  cycle++;\n\n  if (reset) {\n    while (!bresp.empty()) bresp.pop();\n    while (!rresp.empty()) rresp.pop();\n    cycle = 0;\n  }\n}\n\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "mm.h",
    "text": "// See LICENSE for license details.\n\n#ifndef MM_EMULATOR_H\n#define MM_EMULATOR_H\n\n#include <stdint.h>\n#include <cstring>\n#include <queue>\n#include <cassert>\n#include <fesvr/memif.h>\n\nstruct backing_data_t\n{\n  uint8_t* data;\n  size_t size;\n};\n\nclass mm_t\n{\n public:\n  mm_t(size_t mem_bs, size_t mem_sz, size_t word_sz, size_t line_sz, backing_data_t& dat) :\n    data(dat.data), mem_base(mem_bs), mem_size(mem_sz), word_size(word_sz), line_size(line_sz) {\n    assert(dat.size == mem_sz);\n  }\n\n  virtual bool ar_ready() = 0;\n  virtual bool aw_ready() = 0;\n  virtual bool w_ready() = 0;\n  virtual bool b_valid() = 0;\n  virtual uint64_t b_resp() = 0;\n  virtual uint64_t b_id() = 0;\n  virtual bool r_valid() = 0;\n  virtual uint64_t r_resp() = 0;\n  virtual uint64_t r_id() = 0;\n  virtual void *r_data() = 0;\n  virtual bool r_last() = 0;\n\n  virtual void tick\n  (\n    bool reset,\n\n    bool ar_valid,\n    uint64_t ar_addr,\n    uint64_t ar_id,\n    uint64_t ar_size,\n    uint64_t ar_len,\n\n    bool aw_valid,\n    uint64_t aw_addr,\n    uint64_t aw_id,\n    uint64_t aw_size,\n    uint64_t aw_len,\n\n    bool w_valid,\n    uint64_t w_strb,\n    void *w_data,\n    bool w_last,\n\n    bool r_ready,\n    bool b_ready\n  ) = 0;\n\n  virtual void* get_data() { return data; }\n  virtual size_t get_size() { return mem_size; }\n  virtual size_t get_base() { return mem_base; }\n  virtual size_t get_word_size() { return word_size; }\n  virtual size_t get_line_size() { return line_size; }\n\n  void write(uint64_t addr, uint8_t *data, uint64_t strb, uint64_t size);\n  std::vector<char> read(uint64_t addr);\n\n  virtual ~mm_t();\n  uint8_t* data;\n\n protected:\n  size_t mem_base;\n  size_t mem_size;\n  int word_size;\n  int line_size;\n};\n\nstruct mm_rresp_t\n{\n  uint64_t id;\n  std::vector<char> data;\n  bool last;\n\n  mm_rresp_t(uint64_t id, std::vector<char> data, bool last)\n  {\n    this->id = id;\n    this->data = data;\n    this->last = last;\n  }\n\n  mm_rresp_t()\n  {\n    this->id = 0;\n    this->last = false;\n  }\n};\n\nclass mm_magic_t : public mm_t\n{\n public:\n  mm_magic_t(size_t mem_base, size_t mem_sz, size_t word_sz, size_t line_sz, backing_data_t& dat) :\n    mm_t(mem_base, mem_sz, word_sz, line_sz, dat), store_inflight(false) {}\n\n  virtual bool ar_ready() { return true; }\n  virtual bool aw_ready() { return !store_inflight; }\n  virtual bool w_ready() { return store_inflight; }\n  virtual bool b_valid() { return !bresp.empty(); }\n  virtual uint64_t b_resp() { return 0; }\n  virtual uint64_t b_id() { return b_valid() ? bresp.front() : 0; }\n  virtual bool r_valid() { return !rresp.empty(); }\n  virtual uint64_t r_resp() { return 0; }\n  virtual uint64_t r_id() { return r_valid() ? rresp.front().id: 0; }\n  virtual void *r_data() { return r_valid() ? &rresp.front().data[0] : (void*) data; }\n  virtual bool r_last() { return r_valid() ? rresp.front().last : false; }\n\n  virtual void tick\n  (\n    bool reset,\n\n    bool ar_valid,\n    uint64_t ar_addr,\n    uint64_t ar_id,\n    uint64_t ar_size,\n    uint64_t ar_len,\n\n    bool aw_valid,\n    uint64_t aw_addr,\n    uint64_t aw_id,\n    uint64_t aw_size,\n    uint64_t aw_len,\n\n    bool w_valid,\n    uint64_t w_strb,\n    void *w_data,\n    bool w_last,\n\n    bool r_ready,\n    bool b_ready\n  );\n\n protected:\n  bool store_inflight;\n  uint64_t store_addr;\n  uint64_t store_id;\n  uint64_t store_size;\n  uint64_t store_count;\n  std::queue<uint64_t> bresp;\n\n  std::queue<mm_rresp_t> rresp;\n\n  uint64_t cycle;\n};\n\n#endif\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "mm_dramsim2.cc",
    "text": "// See LICENSE for license details.\n\n#include \"mm_dramsim2.h\"\n#include \"mm.h\"\n#include <iostream>\n#include <fstream>\n#include <list>\n#include <queue>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n\n//#define DEBUG_DRAMSIM2\n\nusing namespace DRAMSim;\n\nvoid mm_dramsim2_t::read_complete(unsigned id, uint64_t address, uint64_t clock_cycle)\n{\n  assert(!rreq[address].empty());\n  auto req = rreq[address].front();\n  uint64_t start_addr = (req.addr / word_size) * word_size;\n  for (size_t i = 0; i < req.len; i++) {\n    auto dat = read(start_addr + i * word_size);\n    rresp.push(mm_rresp_t(req.id, dat, (i == req.len - 1)));\n  }\n  read_id_busy[req.id] = false;\n  rreq[address].pop();\n}\n\nvoid mm_dramsim2_t::write_complete(unsigned id, uint64_t address, uint64_t clock_cycle)\n{\n  assert(!wreq[address].empty());\n  auto b_id = wreq[address].front();\n  bresp.push(b_id);\n  write_id_busy[b_id] = false;\n  wreq[address].pop();\n}\n\nvoid power_callback(double a, double b, double c, double d)\n{\n    //fprintf(stderr, \"power callback: %0.3f, %0.3f, %0.3f, %0.3f\\n\",a,b,c,d);\n}\n\n\nmm_dramsim2_t::mm_dramsim2_t(size_t mem_base, size_t mem_sz, size_t word_sz, size_t line_sz, backing_data_t& dat, std::string memory_ini, std::string system_ini, std::string ini_dir, int axi4_ids, size_t clock_hz) :\n  mm_t(mem_base, mem_sz, word_sz, line_sz, dat),\n  read_id_busy(axi4_ids, false),\n  write_id_busy(axi4_ids, false) {\n\n  assert(line_sz == 64); // assumed by dramsim2\n  assert(mem_sz % (1024*1024) == 0);\n  mem = getMemorySystemInstance(memory_ini, system_ini, ini_dir, \"results\", mem_size/(1024*1024));\n  mem->setCPUClockSpeed(clock_hz);\n  TransactionCompleteCB *read_cb = new Callback<mm_dramsim2_t, void, unsigned, uint64_t, uint64_t>(this, &mm_dramsim2_t::read_complete);\n  TransactionCompleteCB *write_cb = new Callback<mm_dramsim2_t, void, unsigned, uint64_t, uint64_t>(this, &mm_dramsim2_t::write_complete);\n  mem->RegisterCallbacks(read_cb, write_cb, power_callback);\n};\n\nbool mm_dramsim2_t::ar_ready() {\n  return mem->willAcceptTransaction();\n}\n\nbool mm_dramsim2_t::aw_ready() {\n  return mem->willAcceptTransaction() && !store_inflight;\n}\n\nvoid mm_dramsim2_t::tick(\n  bool reset,\n\n  bool ar_valid,\n  uint64_t ar_addr,\n  uint64_t ar_id,\n  uint64_t ar_size,\n  uint64_t ar_len,\n\n  bool aw_valid,\n  uint64_t aw_addr,\n  uint64_t aw_id,\n  uint64_t aw_size,\n  uint64_t aw_len,\n\n  bool w_valid,\n  uint64_t w_strb,\n  void *w_data,\n  bool w_last,\n\n  bool r_ready,\n  bool b_ready)\n{\n  bool ar_fire = !reset && ar_valid && ar_ready();\n  bool aw_fire = !reset && aw_valid && aw_ready();\n  bool w_fire = !reset && w_valid && w_ready();\n  bool r_fire = !reset && r_valid() && r_ready;\n  bool b_fire = !reset && b_valid() && b_ready;\n\n  if (mem->willAcceptTransaction()) {\n    for (auto it = rreq_queue.begin(); it != rreq_queue.end(); it++) {\n      if (!read_id_busy[it->id]) {\n        read_id_busy[it->id] = true;\n        auto transaction = *it;\n        rreq[transaction.addr].push(transaction);\n        mem->addTransaction(false, transaction.addr);\n        rreq_queue.erase(it);\n        break;\n      }\n    }\n  }\n\n  if (ar_fire) {\n    rreq_queue.push_back(mm_req_t(ar_id, 1 << ar_size, ar_len + 1, ar_addr));\n  }\n\n  if (aw_fire) {\n    store_addr = aw_addr;\n    store_id = aw_id;\n    store_count = aw_len + 1;\n    store_size = 1 << aw_size;\n    store_inflight = true;\n  }\n\n  if (w_fire) {\n    write(store_addr, (uint8_t*)w_data, w_strb, store_size);\n    store_addr += store_size;\n    store_count--;\n\n    if (store_count == 0) {\n      store_inflight = false;\n      mem->addTransaction(true, store_addr);\n      wreq[store_addr].push(store_id);\n      assert(w_last);\n    }\n  }\n\n  if (b_fire)\n    bresp.pop();\n\n  if (r_fire)\n    rresp.pop();\n\n  mem->update();\n  cycle++;\n\n  if (reset) {\n    while (!bresp.empty()) bresp.pop();\n    while (!rresp.empty()) rresp.pop();\n    cycle = 0;\n  }\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimDRAM",
    "name": "mm_dramsim2.h",
    "text": "// See LICENSE for license details.\n\n#ifndef _MM_EMULATOR_DRAMSIM2_H\n#define _MM_EMULATOR_DRAMSIM2_H\n\n#include \"mm.h\"\n#include <DRAMSim.h>\n#include <map>\n#include <queue>\n#include <list>\n#include <stdint.h>\n\nstruct mm_req_t {\n  uint64_t id;\n  uint64_t size;\n  uint64_t len;\n  uint64_t addr;\n\n  mm_req_t(uint64_t id, uint64_t size, uint64_t len, uint64_t addr)\n  {\n    this->id = id;\n    this->size = size;\n    this->len = len;\n    this->addr = addr;\n  }\n\n  mm_req_t()\n  {\n    this->id = 0;\n    this->size = 0;\n    this->len = 0;\n    this->addr = 0;\n  }\n};\n\nclass mm_dramsim2_t : public mm_t\n{\n public:\n  mm_dramsim2_t(size_t mem_base, size_t mem_sz, size_t word_sz, size_t line_sz, backing_data_t& dat, std::string memory_ini, std::string system_ini, std::string ini_dir, int axi4_ids, size_t clock_hz);\n\n  virtual bool ar_ready();\n  virtual bool aw_ready();\n  virtual bool w_ready() { return store_inflight; }\n  virtual bool b_valid() { return !bresp.empty(); }\n  virtual uint64_t b_resp() { return 0; }\n  virtual uint64_t b_id() { return b_valid() ? bresp.front() : 0; }\n  virtual bool r_valid() { return !rresp.empty(); }\n  virtual uint64_t r_resp() { return 0; }\n  virtual uint64_t r_id() { return r_valid() ? rresp.front().id: 0; }\n  virtual void *r_data() { return r_valid() ? (void*) &rresp.front().data[0] : data; }\n  virtual bool r_last() { return r_valid() ? rresp.front().last : false; }\n\n  virtual void tick\n  (\n    bool reset,\n\n    bool ar_valid,\n    uint64_t ar_addr,\n    uint64_t ar_id,\n    uint64_t ar_size,\n    uint64_t ar_len,\n\n    bool aw_valid,\n    uint64_t aw_addr,\n    uint64_t aw_id,\n    uint64_t aw_size,\n    uint64_t aw_len,\n\n    bool w_valid,\n    uint64_t w_strb,\n    void *w_data,\n    bool w_last,\n\n    bool r_ready,\n    bool b_ready\n  );\n\n\n protected:\n  DRAMSim::MultiChannelMemorySystem *mem;\n  uint64_t cycle;\n\n  bool store_inflight = false;\n  uint64_t store_addr;\n  uint64_t store_id;\n  uint64_t store_size;\n  uint64_t store_count;\n  std::queue<uint64_t> bresp;\n\n  // Keep a FIFO of IDs that made reads to an address since Dramsim2 doesn't\n  // track it. Reads or writes to the same address from different IDs can\n  // collide\n  std::map<uint64_t, std::queue<uint64_t>> wreq;\n  std::map<uint64_t, std::queue<mm_req_t>> rreq;\n  std::queue<mm_rresp_t> rresp;\n  //std::map<uint64_t, std::queue<mm_rresp_t> > rreq;\n\n\n  // Track inflight requests by putting indexes to their positions in the\n  // stimulus vector in queues for each AXI channel\n  std::vector<bool> read_id_busy;\n  std::vector<bool> write_id_busy;\n  std::list<mm_req_t> rreq_queue;\n\n  uint64_t clock_hz = 0;\n\n  void read_complete(unsigned id, uint64_t address, uint64_t clock_cycle);\n  void write_complete(unsigned id, uint64_t address, uint64_t clock_cycle);\n};\n\n#endif\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimUART",
    "name": "SimUART.v",
    "text": "`define DATA_WIDTH 8\n\nimport \"DPI-C\" function void uart_init(\n                                       input string filename,\n                                       input int    uartno,\n                                       input int    forcepty\n);\n\nimport \"DPI-C\" function void uart_tick\n(\n input int   uartno,\n input bit   serial_out_valid,\n output bit  serial_out_ready,\n input byte  serial_out_bits,\n\n output bit  serial_in_valid,\n input bit   serial_in_ready,\n output byte serial_in_bits\n);\n\nmodule SimUART #(UARTNO=0, FORCEPTY=0) (\n    input              clock,\n    input              reset,\n\n    input                    serial_out_valid,\n    output                   serial_out_ready,\n    input  [`DATA_WIDTH-1:0] serial_out_bits,\n\n    output                   serial_in_valid,\n    input                    serial_in_ready,\n    output [`DATA_WIDTH-1:0] serial_in_bits\n);\n\n   wire                      __in_ready;\n   bit                       __in_valid;\n   byte                      __in_bits;\n\n   bit                       __out_ready;\n   wire                      __out_valid;\n   wire [`DATA_WIDTH-1:0]    __out_bits;\n\n   string                    __uartlog;\n\n   initial begin\n      $value$plusargs(\"uartlog=%s\", __uartlog);\n      uart_init(__uartlog, UARTNO, FORCEPTY);\n   end\n\n   reg __in_valid_reg;\n   reg [`DATA_WIDTH-1:0] __in_bits_reg;\n\n   reg                   __out_ready_reg;\n\n\n   \n   // Evaluate the signals on the positive edge\n   always @(posedge clock) begin\n      if (reset) begin\n         __in_valid = 0;\n         __out_ready = 0;\n\n         __in_valid_reg <= 0;\n         __in_bits_reg <= 0;\n         __out_ready_reg <= 0;\n      end else begin\n         uart_tick(\n                   UARTNO,\n                   __out_valid,\n                   __out_ready,\n                   __out_bits,\n                   __in_valid,\n                   __in_ready,\n                   __in_bits\n                   );\n\n         __out_ready_reg <= __out_ready;\n         __in_valid_reg  <= __in_valid;\n         __in_bits_reg   <= __in_bits;\n      end\n   end // always @ (posedge clock)\n\n   assign serial_in_valid  = __in_valid_reg;\n   assign serial_in_bits   = __in_bits_reg;\n   assign __in_ready = serial_in_ready;\n\n   assign serial_out_ready = __out_ready_reg;\n   assign __out_valid = serial_out_valid;\n   assign __out_bits = serial_out_bits;\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimUART",
    "name": "SimUART.cc",
    "text": "#include <vpi_user.h>\n#include <svdpi.h>\n\n#include <stdio.h>\n#include <string.h>\n#include <map>\n\n#include \"uart.h\"\n\nstd::map<int, uart_t*> uarts;\n\nextern \"C\" void uart_init(\n        const char *filename,\n        int uartno,\n        int forcepty)\n{\n  bool use_pty = forcepty;\n  s_vpi_vlog_info vinfo;\n  if (!vpi_get_vlog_info(&vinfo))\n    abort();\n  for (int i = 1; i < vinfo.argc; i++) {\n    std::string arg(vinfo.argv[i]);\n    if (arg == \"+uart-pty\")\n      use_pty = true;\n  }\n  if (uarts.find(uartno) != uarts.end()) {\n    printf(\"Attempting to initialize multiple uarts with same uartno=%d, aborting\\n\", uartno);\n    abort();\n  }\n  if (strlen(filename) != 0)\n    uarts[uartno] = new uart_t(filename, uartno, use_pty);\n  else\n    uarts[uartno] = new uart_t(0, uartno, use_pty);\n}\n\nextern \"C\" void uart_tick(\n                          int uartno,\n                          unsigned char out_valid,\n                          unsigned char *out_ready,\n                          char out_bits,\n                          unsigned char *in_valid,\n                          unsigned char in_ready,\n                          char *in_bits)\n{\n  uart_t* uart = uarts[uartno];\n  if (uart == NULL) {\n    *out_ready = 0;\n    *in_valid = 0;\n    return;\n  }\n\n  uart->tick(\n             out_valid,\n             out_ready,\n             out_bits,\n\n             in_valid,\n             in_ready,\n             in_bits);\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimUART",
    "name": "uart.cc",
    "text": "//See LICENSE for license details\n\n#include \"uart.h\"\n#include <sys/stat.h>\n#include <fcntl.h>\n\n#define _XOPEN_SOURCE\n#include <stdlib.h>\n#include <stdio.h>\n\n#ifndef _WIN32\n#include <unistd.h>\n\n// name length limit for ptys\n#define PTYNAMELEN 256\n\n/* There is no \"backpressure\" to the user input for sigs. only one at a time\n * non-zero value represents unconsumed special char input.\n *\n * Reset to zero once consumed.\n */\n\n// This is fine for multiple UARTs because UARTs > uart 0 will use pty, not stdio\nchar specialchar = 0;\n\nvoid sighand(int s) {\n    switch (s) {\n        case SIGINT:\n            // ctrl-c\n            specialchar = 0x3;\n            break;\n        default:\n            specialchar = 0x0;\n    }\n}\n#else\n#warning \"The UARTAdapter is untested with Windows. Many features expected to be broken.\"\n#endif\n\nuart_t::uart_t(const char* filename_prefix, int uartno, bool use_pty)\n{\n    this->inputfd = 0;\n    this->outputfd = 0;\n    this->print_file = false;\n\n    if (uartno == 0 && !use_pty) {\n        // signal handler so ctrl-c doesn't kill simulation when UART is attached\n        // to stdin/stdout\n        struct sigaction sigIntHandler;\n        sigIntHandler.sa_handler = sighand;\n        sigemptyset(&sigIntHandler.sa_mask);\n        sigIntHandler.sa_flags = 0;\n        sigaction(SIGINT, &sigIntHandler, NULL);\n        if (filename_prefix)\n            printf(\"[UART] UART0 is here (stdin).\\n\");\n        else\n            printf(\"[UART] UART0 is here (stdin/stdout).\\n\");\n        this->inputfd = STDIN_FILENO;\n        this->outputfd = STDOUT_FILENO;\n    } else {\n        // for UARTs that are not UART0, use a PTY\n        char ptyname[PTYNAMELEN];\n        int ptyfd = posix_openpt(O_RDWR | O_NOCTTY);\n        grantpt(ptyfd);\n        unlockpt(ptyfd);\n        ptsname_r(ptyfd, ptyname, PTYNAMELEN);\n\n        // create symlink for reliable location to find uart pty\n        std::string symlinkname = std::string(\"uartpty\") + std::to_string(uartno);\n        // remove in case symlink already exists\n        remove(symlinkname.c_str());\n        if(symlink(ptyname, symlinkname.c_str())) {\n            printf(\"[UART_ERR] Failed to created symlink with ptyname %s to symlink name %s\\n\", ptyname, symlinkname.c_str());\n            exit(1);\n        }\n        printf(\"[UART] UART%d is on PTY: %s, symlinked at %s\\n\", uartno, ptyname, symlinkname.c_str());\n        printf(\"[UART] Attach to this UART with 'sudo screen %s' or 'sudo screen %s'\\n\", ptyname, symlinkname.c_str());\n        this->inputfd = ptyfd;\n        this->outputfd = ptyfd;\n    }\n\n    // if filename exists then put to file\n    if (filename_prefix) {\n        print_file = true;\n        std::string uartlogname = std::string(filename_prefix) + std::to_string(uartno);\n        printf(\"[UART] UART%d stdout being redirected to file: %s\\n\", uartno, uartlogname.c_str());\n        this->outputfd = open(uartlogname.c_str(), O_RDWR | O_CREAT, 0644);\n    }\n\n    // Don't block on reads if there is nothing typed in\n    fcntl(inputfd, F_SETFL, fcntl(inputfd, F_GETFL) | O_NONBLOCK);\n}\n\nuart_t::~uart_t() {\n    if (print_file)\n        close(this->outputfd);\n}\n\nvoid uart_t::tick(\n        unsigned char out_valid,\n        unsigned char *out_ready,\n        char out_bits,\n\n        unsigned char *in_valid,\n        unsigned char in_ready,\n        char *in_bits)\n{\n    *out_ready = true;\n    *in_valid = false;\n\n    if (in_ready) {\n        char inp;\n        int readamt;\n        if (specialchar) {\n            // send special character (e.g. ctrl-c)\n            // for stdin handling\n            //\n            // PTY should never trigger this\n            inp = specialchar;\n            specialchar = 0;\n            readamt = 1;\n        } else {\n            // else check if we have input\n            readamt = ::read(inputfd, &inp, 1);\n        }\n\n        if (readamt > 0) {\n            *in_bits = inp;\n            *in_valid = true;\n        }\n    }\n\n    if (*out_ready && out_valid) {\n        if (::write(outputfd, &out_bits, 1) == -1) {\n            printf(\"[UART_ERR] Failed to write to outputfd %d\\n\", outputfd);\n            exit(1);\n        }\n    }\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimUART",
    "name": "uart.h",
    "text": "#ifndef __SIMUART_H\n#define __SIMUART_H\n\n#include <signal.h>\n#include <string.h>\n#include <string>\n\nclass uart_t\n{\n    public:\n        uart_t(\n            const char* filename_prefix,\n            int uartno,\n            bool use_pty);\n        ~uart_t();\n        void tick(\n            unsigned char out_valid,\n            unsigned char *out_ready,\n            char out_bits,\n\n            unsigned char *in_valid,\n            unsigned char in_ready,\n            char *in_bits);\n\n    private:\n        bool print_file;\n        int inputfd;\n        int outputfd;\n};\n\n#endif // __SIMUART_H\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_147",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_148",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_149",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimJTAG",
    "name": "SimJTAG.v",
    "text": "// See LICENSE.SiFive for license details.\n//VCS coverage exclude_file\nimport \"DPI-C\" function int jtag_tick\n(\n output bit jtag_TCK,\n output bit jtag_TMS,\n output bit jtag_TDI,\n output bit jtag_TRSTn,\n \n input bit  jtag_TDO\n);\n\nmodule SimJTAG #(\n                 parameter TICK_DELAY = 50\n                 )(\n\n                   input         clock,\n                   input         reset,\n                   \n                   input         enable,\n                   input         init_done,\n\n                   output        jtag_TCK,\n                   output        jtag_TMS,\n                   output        jtag_TDI,\n                   output        jtag_TRSTn,\n \n                   input         jtag_TDO_data,\n                   input         jtag_TDO_driven,\n                          \n                   output [31:0] exit\n                   );\n\n   reg [31:0]                    tickCounterReg;\n   wire [31:0]                   tickCounterNxt;\n   \n   assign tickCounterNxt = (tickCounterReg == 0) ? TICK_DELAY :  (tickCounterReg - 1);\n   \n   bit          r_reset;\n\n   wire [31:0]  random_bits = $random;\n   \n   wire         #0.1 __jtag_TDO = jtag_TDO_driven ? \n                jtag_TDO_data : random_bits[0];\n      \n   bit          __jtag_TCK;\n   bit          __jtag_TMS;\n   bit          __jtag_TDI;\n   bit          __jtag_TRSTn;\n   int          __exit;\n\n   reg          init_done_sticky;\n   \n   assign #0.1 jtag_TCK   = __jtag_TCK;\n   assign #0.1 jtag_TMS   = __jtag_TMS;\n   assign #0.1 jtag_TDI   = __jtag_TDI;\n   assign #0.1 jtag_TRSTn = __jtag_TRSTn;\n   \n   assign #0.1 exit = __exit;\n\n   always @(posedge clock) begin\n      r_reset <= reset;\n      if (reset || r_reset) begin\n         __exit = 0;\n         tickCounterReg <= TICK_DELAY;\n         init_done_sticky <= 1'b0;\n         __jtag_TCK = !__jtag_TCK;\n      end else begin\n         init_done_sticky <= init_done | init_done_sticky;\n         if (enable && init_done_sticky) begin\n            tickCounterReg <= tickCounterNxt;\n            if (tickCounterReg == 0) begin\n               __exit = jtag_tick(\n                                  __jtag_TCK,\n                                  __jtag_TMS,\n                                  __jtag_TDI,\n                                  __jtag_TRSTn,\n                                  __jtag_TDO);\n            end\n         end // if (enable && init_done_sticky)\n      end // else: !if(reset || r_reset)\n   end // always @ (posedge clock)\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimJTAG",
    "name": "SimJTAG.cc",
    "text": "// See LICENSE.SiFive for license details.\n\n#include <cstdlib>\n#include \"remote_bitbang.h\"\n\nremote_bitbang_t* jtag;\nextern \"C\" int jtag_tick\n(\n unsigned char * jtag_TCK,\n unsigned char * jtag_TMS,\n unsigned char * jtag_TDI,\n unsigned char * jtag_TRSTn,\n unsigned char jtag_TDO\n)\n{\n  if (!jtag) {\n    // TODO: Pass in real port number\n    jtag = new remote_bitbang_t(0);\n  }\n\n  jtag->tick(jtag_TCK, jtag_TMS, jtag_TDI, jtag_TRSTn, jtag_TDO);\n\n  return jtag->done() ? (jtag->exit_code() << 1 | 1) : 0;\n\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimJTAG",
    "name": "remote_bitbang.h",
    "text": "// See LICENSE.Berkeley for license details.\n\n#ifndef REMOTE_BITBANG_H\n#define REMOTE_BITBANG_H\n\n#include <stdint.h>\n#include <sys/types.h>\n\nclass remote_bitbang_t\n{\npublic:\n  // Create a new server, listening for connections from localhost on the given\n  // port.\n  remote_bitbang_t(uint16_t port);\n\n  // Do a bit of work.\n  void tick(unsigned char * jtag_tck,\n            unsigned char * jtag_tms,\n            unsigned char * jtag_tdi,\n            unsigned char * jtag_trstn,\n            unsigned char jtag_tdo);\n\n  unsigned char done() {return quit;}\n  \n  int exit_code() {return err;}\n  \n private:\n\n  int err;\n  \n  unsigned char tck;\n  unsigned char tms;\n  unsigned char tdi;\n  unsigned char trstn;\n  unsigned char tdo;\n  unsigned char quit;\n    \n  int socket_fd;\n  int client_fd;\n\n  static const ssize_t buf_size = 64 * 1024;\n  char recv_buf[buf_size];\n  ssize_t recv_start, recv_end;\n\n  // Check for a client connecting, and accept if there is one.\n  void accept();\n  // Execute any commands the client has for us.\n  // But we only execute 1 because we need time for the\n  // simulation to run.\n  void execute_command();\n\n  // Reset. Currently does nothing.\n  void reset();\n\n  void set_pins(char _tck, char _tms, char _tdi);\n\n};\n\n#endif\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimJTAG",
    "name": "remote_bitbang.cc",
    "text": "// See LICENSE.Berkeley for license details.\n\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include <algorithm>\n#include <cassert>\n#include <cstdio>\n#include <cstdlib>\n\n#include \"remote_bitbang.h\"\n\n/////////// remote_bitbang_t\n\nremote_bitbang_t::remote_bitbang_t(uint16_t port) :\n  socket_fd(0),\n  client_fd(0),\n  recv_start(0),\n  recv_end(0),\n  err(0)\n{\n  socket_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (socket_fd == -1) {\n    fprintf(stderr, \"remote_bitbang failed to make socket: %s (%d)\\n\",\n            strerror(errno), errno);\n    abort();\n  }\n\n  fcntl(socket_fd, F_SETFL, O_NONBLOCK);\n  int reuseaddr = 1;\n  if (setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &reuseaddr,\n                 sizeof(int)) == -1) {\n    fprintf(stderr, \"remote_bitbang failed setsockopt: %s (%d)\\n\",\n            strerror(errno), errno);\n    abort();\n  }\n\n  struct sockaddr_in addr;\n  memset(&addr, 0, sizeof(addr));\n  addr.sin_family = AF_INET;\n  addr.sin_addr.s_addr = INADDR_ANY;\n  addr.sin_port = htons(port);\n\n  if (::bind(socket_fd, (struct sockaddr *) &addr, sizeof(addr)) == -1) {\n    fprintf(stderr, \"remote_bitbang failed to bind socket: %s (%d)\\n\",\n            strerror(errno), errno);\n    abort();\n  }\n\n  if (listen(socket_fd, 1) == -1) {\n    fprintf(stderr, \"remote_bitbang failed to listen on socket: %s (%d)\\n\",\n            strerror(errno), errno);\n    abort();\n  }\n\n  socklen_t addrlen = sizeof(addr);\n  if (getsockname(socket_fd, (struct sockaddr *) &addr, &addrlen) == -1) {\n    fprintf(stderr, \"remote_bitbang getsockname failed: %s (%d)\\n\",\n            strerror(errno), errno);\n    abort();\n  }\n\n  tck = 1;\n  tms = 1;\n  tdi = 1;\n  trstn = 1;\n  quit = 0;\n\n  fprintf(stderr, \"This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.\\n\");\n  fprintf(stderr, \"Listening on port %d\\n\",\n         ntohs(addr.sin_port));\n}\n\nvoid remote_bitbang_t::accept()\n{\n\n  fprintf(stderr,\"Attempting to accept client socket\\n\");\n  int again = 1;\n  while (again != 0) {\n    client_fd = ::accept(socket_fd, NULL, NULL);\n    if (client_fd == -1) {\n      if (errno == EAGAIN) {\n        // No client waiting to connect right now.\n      } else {\n        fprintf(stderr, \"failed to accept on socket: %s (%d)\\n\", strerror(errno),\n                errno);\n        again = 0;\n        abort();\n      }\n    } else {\n      fcntl(client_fd, F_SETFL, O_NONBLOCK);\n      fprintf(stderr, \"Accepted successfully.\");\n      again = 0;\n    }\n  }\n}\n\nvoid remote_bitbang_t::tick(\n                            unsigned char * jtag_tck,\n                            unsigned char * jtag_tms,\n                            unsigned char * jtag_tdi,\n                            unsigned char * jtag_trstn,\n                            unsigned char jtag_tdo\n                            )\n{\n  if (client_fd > 0) {\n    tdo = jtag_tdo;\n    execute_command();\n  } else {\n    this->accept();\n  }\n\n  * jtag_tck = tck;\n  * jtag_tms = tms;\n  * jtag_tdi = tdi;\n  * jtag_trstn = trstn;\n\n}\n\nvoid remote_bitbang_t::reset(){\n  //trstn = 0;\n}\n\nvoid remote_bitbang_t::set_pins(char _tck, char _tms, char _tdi){\n  tck = _tck;\n  tms = _tms;\n  tdi = _tdi;\n}\n\nvoid remote_bitbang_t::execute_command()\n{\n  char command;\n  int again = 1;\n  while (again) {\n    ssize_t num_read = read(client_fd, &command, sizeof(command));\n    if (num_read == -1) {\n      if (errno == EAGAIN) {\n        // We'll try again the next call.\n        //fprintf(stderr, \"Received no command. Will try again on the next call\\n\");\n      } else {\n        fprintf(stderr, \"remote_bitbang failed to read on socket: %s (%d)\\n\",\n                strerror(errno), errno);\n        again = 0;\n        abort();\n      }\n    } else if (num_read == 0) {\n      fprintf(stderr, \"No Command Received.\\n\");\n      again = 1;\n    } else {\n      again = 0;\n    }\n  }\n\n  //fprintf(stderr, \"Received a command %c\\n\", command);\n\n  int dosend = 0;\n\n  char tosend = '?';\n\n  switch (command) {\n  case 'B': /* fprintf(stderr, \"*BLINK*\\n\"); */ break;\n  case 'b': /* fprintf(stderr, \"_______\\n\"); */ break;\n  case 'r': reset(); break; // This is wrong. 'r' has other bits that indicated TRST and SRST.\n  case '0': set_pins(0, 0, 0); break;\n  case '1': set_pins(0, 0, 1); break;\n  case '2': set_pins(0, 1, 0); break;\n  case '3': set_pins(0, 1, 1); break;\n  case '4': set_pins(1, 0, 0); break;\n  case '5': set_pins(1, 0, 1); break;\n  case '6': set_pins(1, 1, 0); break;\n  case '7': set_pins(1, 1, 1); break;\n  case 'R': dosend = 1; tosend = tdo ? '1' : '0'; break;\n  case 'Q': quit = 1; break;\n  default:\n    fprintf(stderr, \"remote_bitbang got unsupported command '%c'\\n\",\n            command);\n  }\n\n  if (dosend){\n    while (1) {\n      ssize_t bytes = write(client_fd, &tosend, sizeof(tosend));\n      if (bytes == -1) {\n        fprintf(stderr, \"failed to write to socket: %s (%d)\\n\", strerror(errno), errno);\n        abort();\n      }\n      if (bytes > 0) {\n        break;\n      }\n    }\n  }\n\n  if (quit) {\n    // The remote disconnected.\n    fprintf(stderr, \"Remote end disconnected\\n\");\n    close(client_fd);\n    client_fd = 0;\n  }\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_150",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_151",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_152",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_153",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.plusarg_reader_154",
    "name": "plusarg_reader.v",
    "text": "// See LICENSE.SiFive for license details.\n\n//VCS coverage exclude_file\n\n// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),\n// but Incisive demands them. These default values should never be used.\nmodule plusarg_reader #(\n   parameter FORMAT=\"borked=%d\",\n   parameter WIDTH=1,\n   parameter [WIDTH-1:0] DEFAULT=0\n) (\n   output [WIDTH-1:0] out\n);\n\n`ifdef SYNTHESIS\nassign out = DEFAULT;\n`else\nreg [WIDTH-1:0] myplus;\nassign out = myplus;\n\ninitial begin\n   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;\nend\n`endif\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "SimTSI.v",
    "text": "import \"DPI-C\" function int tsi_tick\n(\n    input int  chip_id,\n    input bit  tsi_out_valid,\n    output bit tsi_out_ready,\n    input int  tsi_out_bits,\n\n    output bit tsi_in_valid,\n    input bit  tsi_in_ready,\n    output int tsi_in_bits\n);\n\nmodule SimTSI #(parameter CHIPID) (\n    input         clock,\n    input         reset,\n    input         tsi_out_valid,\n    output        tsi_out_ready,\n    input  [31:0] tsi_out_bits,\n\n    output        tsi_in_valid,\n    input         tsi_in_ready,\n    output [31:0] tsi_in_bits,\n\n    output [31:0] exit\n);\n\n    bit __in_valid;\n    bit __out_ready;\n    int __in_bits;\n    int __exit;\n\n    reg __in_valid_reg;\n    reg __out_ready_reg;\n    reg [31:0] __in_bits_reg;\n    reg [31:0] __exit_reg;\n\n    assign tsi_in_valid  = __in_valid_reg;\n    assign tsi_in_bits   = __in_bits_reg;\n    assign tsi_out_ready = __out_ready_reg;\n    assign exit = __exit_reg;\n\n    // Evaluate the signals on the positive edge\n    always @(posedge clock) begin\n        if (reset) begin\n            __in_valid = 0;\n            __out_ready = 0;\n            __exit = 0;\n\n            __in_valid_reg <= 0;\n            __in_bits_reg <= 0;\n            __out_ready_reg <= 0;\n            __exit_reg <= 0;\n        end else begin\n            __exit = tsi_tick(\n                CHIPID,\n                tsi_out_valid,\n                __out_ready,\n                tsi_out_bits,\n                __in_valid,\n                tsi_in_ready,\n                __in_bits\n            );\n\n            __out_ready_reg <= __out_ready;\n            __in_valid_reg  <= __in_valid;\n            __in_bits_reg   <= __in_bits;\n            __exit_reg <= __exit;\n        end\n    end\n\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "SimTSI.cc",
    "text": "#include <vpi_user.h>\n#include <svdpi.h>\n#include <map>\n#include <string>\n#include \"testchip_tsi.h\"\n\nstd::map<int, testchip_tsi_t*> tsis;\n\n// Remove VCS simv option from argv if it match pattern -X???=\nvoid remove_vcs_simv_opt(int & argc, char **& argv){\n    int idx = 0;\n    while(idx < argc){\n        std::string str = std::string(argv[idx]);\n        if(str.length() > 1 && str[0] == '-' && str[1] != '-' && str.find('=') != std::string::npos){\n            // Found -????=???? as VCS simv option\n            for(int i = idx; i < argc - 1; i++){\n                // Remove the current option\n                argv[i] = argv[i + 1];\n            }\n            argc--;\n        }else{\n            idx++;\n        }\n    }\n}\n\nextern \"C\" int tsi_tick(\n                        int chip_id,\n                        unsigned char out_valid,\n                        unsigned char *out_ready,\n                        int out_bits,\n\n                        unsigned char *in_valid,\n                        unsigned char in_ready,\n                        int *in_bits)\n{\n    bool out_fire = *out_ready && out_valid;\n    bool in_fire = *in_valid && in_ready;\n    bool in_free = !(*in_valid);\n\n    auto it = tsis.find(chip_id);\n\n    if (it == tsis.end()) {\n        s_vpi_vlog_info info;\n        if (!vpi_get_vlog_info(&info))\n          abort();\n\n        // Prevent simv option enter htif\n        remove_vcs_simv_opt(info.argc, info.argv);\n\n        // TODO: We should somehow inspect whether or not our backing memory supports loadmem, instead of unconditionally setting it to true\n        tsis[chip_id] = new testchip_tsi_t(info.argc, info.argv, true);\n    }\n\n    testchip_tsi_t* tsi = tsis[chip_id];\n    tsi->tick(out_valid, out_bits, in_ready);\n    tsi->switch_to_host();\n\n    *in_valid = tsi->in_valid();\n    *in_bits = tsi->in_bits();\n    *out_ready = tsi->out_ready();\n\n    return tsi->done() ? (tsi->exit_code() << 1 | 1) : 0;\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "testchip_htif.cc",
    "text": "#include \"testchip_htif.h\"\n\nvoid testchip_htif_t::parse_htif_args(std::vector<std::string> &args) {\n  for (auto& arg : args) {\n    if (arg.find(\"+init_write=0x\") == 0) {\n      auto d = arg.find(\":0x\");\n      if (d == std::string::npos) {\n        throw std::invalid_argument(\"Improperly formatted +init_write argument\");\n      }\n      uint64_t addr = strtoull(arg.substr(14, d - 14).c_str(), 0, 16);\n      uint32_t val = strtoull(arg.substr(d + 3).c_str(), 0, 16);\n      init_access_t access = { .address=addr, .stdata=val, .store=true };\n      init_accesses.push_back(access);\n    }\n    if (arg.find(\"+init_read=0x\") == 0) {\n      uint64_t addr = strtoull(arg.substr(13).c_str(), 0, 16);\n      init_access_t access = { .address=addr, .stdata=0, .store=false };\n      init_accesses.push_back(access);\n    }\n    if (arg.find(\"+no_hart0_msip\") == 0)\n      write_hart0_msip = false;\n  }\n}\n\nvoid testchip_htif_t::perform_init_accesses() {\n  for (auto p : init_accesses) {\n    if (p.store) {\n      fprintf(stderr, \"Writing %lx with %x\\n\", p.address, p.stdata);\n      write_chunk(p.address, sizeof(uint32_t), &p.stdata);\n      fprintf(stderr, \"Done writing %lx with %x\\n\", p.address, p.stdata);\n    } else {\n      fprintf(stderr, \"Reading %lx ...\", p.address);\n      uint32_t rdata = 0;\n      read_chunk(p.address, sizeof(uint32_t), &rdata);\n      fprintf(stderr, \" got %x\\n\", rdata);\n    }\n  }\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "testchip_htif.h",
    "text": "#ifndef __TESTCHIP_HTIF_H\n#define __TESTCHIP_HTIF_H\n\n#include <stdexcept>\n#include <stdint.h>\n#include <vector>\n#include <string>\n#include <fesvr/htif.h>\n\nstruct init_access_t {\n  uint64_t address;\n  uint32_t stdata;\n  bool store;\n};\n\nclass testchip_htif_t\n{\n public:\n  virtual void write_chunk(addr_t taddr, size_t nbytes, const void* src) = 0;\n  virtual void read_chunk(addr_t taddr, size_t nbytes, void* dst) = 0;\n  virtual ~testchip_htif_t() {};\n\n protected:\n  void perform_init_accesses();\n  void parse_htif_args(std::vector<std::string> &args);\n  bool write_hart0_msip = true;\n  std::vector<init_access_t> init_accesses;\n};\n#endif\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "testchip_tsi.cc",
    "text": "#include \"testchip_tsi.h\"\n#include <stdexcept>\n\ntestchip_tsi_t::testchip_tsi_t(int argc, char** argv, bool can_have_loadmem) : tsi_t(argc, argv)\n{\n  has_loadmem = false;\n  init_accesses = std::vector<init_access_t>();\n  write_hart0_msip = true;\n  is_loadmem = false;\n  cflush_addr = 0;\n  std::vector<std::string> args(argv + 1, argv + argc);\n  for (auto& arg : args) {\n    if (arg.find(\"+loadmem=\") == 0)\n      has_loadmem = can_have_loadmem;\n    if (arg.find(\"+cflush_addr=0x\") == 0)\n      cflush_addr = strtoull(arg.substr(15).c_str(), 0, 16);\n  }\n\n  testchip_htif_t::parse_htif_args(args);\n}\n\nvoid testchip_tsi_t::flush_cache_lines(addr_t taddr, size_t nbytes) {\n  if (!cflush_addr) return;\n  static size_t cblock_bytes = 64;\n  size_t base = taddr & ~(cblock_bytes-1);\n  while (base < taddr + nbytes) {\n    uint32_t data[2] { base, base >> 32 };\n    tsi_t::write_chunk(cflush_addr, 8, data);\n    base += cblock_bytes;\n  }\n}\n\nvoid testchip_tsi_t::write_chunk(addr_t taddr, size_t nbytes, const void* src)\n{\n  if (is_loadmem) {\n    load_mem_write(taddr, nbytes, src);\n  } else {\n    flush_cache_lines(taddr, nbytes);\n    tsi_t::write_chunk(taddr, nbytes, src);\n  }\n}\n\nvoid testchip_tsi_t::read_chunk(addr_t taddr, size_t nbytes, void* dst)\n{\n  if (is_loadmem) {\n    load_mem_read(taddr, nbytes, dst);\n  } else {\n    flush_cache_lines(taddr, nbytes);\n    tsi_t::read_chunk(taddr, nbytes, dst);\n  }\n}\n\nvoid testchip_tsi_t::reset()\n{\n  testchip_htif_t::perform_init_accesses();\n  if (write_hart0_msip)\n    tsi_t::reset();\n}\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.SimTSI",
    "name": "testchip_tsi.h",
    "text": "#ifndef __TESTCHIP_TSI_H\n#define __TESTCHIP_TSI_H\n\n#include <stdexcept>\n\n#include <fesvr/tsi.h>\n#include <fesvr/htif.h>\n#include \"testchip_htif.h\"\n\nclass testchip_tsi_t : public tsi_t, public testchip_htif_t\n{\n public:\n  testchip_tsi_t(int argc, char** argv, bool has_loadmem);\n  virtual ~testchip_tsi_t() {};\n\n  void write_chunk(addr_t taddr, size_t nbytes, const void* src) override;\n  void read_chunk(addr_t taddr, size_t nbytes, void* dst) override;\n  void load_program() {\n    switch_to_target();\n    is_loadmem = has_loadmem;\n    tsi_t::load_program();\n    is_loadmem = false;\n  }\n  void idle() { switch_to_target(); }\n\n protected:\n  virtual void load_mem_write(addr_t taddr, size_t nbytes, const void* src) { };\n  virtual void load_mem_read(addr_t taddr, size_t nbytes, void* dst) { };\n  void flush_cache_lines(addr_t taddr, size_t nbytes);\n  void reset() override;\n  bool has_loadmem;\n\n private:\n\n  bool is_loadmem;\n  addr_t cflush_addr;\n};\n#endif\n"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.bits.last"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.bits.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.bits.data"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.bits.id"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.r.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.qos"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.prot"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.cache"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.lock"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.burst"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.size"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.len"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.bits.id"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.ar.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.b.bits.resp"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.b.bits.id"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.b.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.b.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.w.bits.last"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.w.bits.strb"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.w.bits.data"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.w.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.w.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.qos"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.prot"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.cache"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.lock"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.burst"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.size"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.len"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.addr"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.bits.id"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.bits.aw.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>axi4_mem_0.clock"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>custom_boot"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>jtag.TDO"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>jtag.TDI"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>jtag.TMS"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>jtag.TCK"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>reset_io"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>clock_uncore"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>clock_tileClockGroup_rockettile_0"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>clock_tileClockGroup_rockettile_1"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>clock_tileClockGroup_rockettile_2"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>clock_tap"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.clock_in"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.out.bits"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.out.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.out.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.in.bits"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.in.valid"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>serial_tl_0.in.ready"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>uart_0.rxd"
  },
  {
    "class": "firrtl.transforms.DontTouchAnnotation",
    "target": "~TestHarness|ChipTop>uart_0.txd"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.ClockSourceAtFreqMHz",
    "name": "ClockSourceAtFreqMHz.v",
    "text": "\nmodule ClockSourceAtFreqMHz #(parameter PERIOD=\"\") (\n    input power,\n    input gate,\n    output clk);\n  timeunit 1ns/1ps;\n  reg clk_i = 1'b0;\n  always #(PERIOD/2.0) clk_i = ~clk_i & (power & ~gate);\n  assign clk = clk_i;\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.ClockSourceAtFreqMHz_1",
    "name": "ClockSourceAtFreqMHz.v",
    "text": "\nmodule ClockSourceAtFreqMHz #(parameter PERIOD=\"\") (\n    input power,\n    input gate,\n    output clk);\n  timeunit 1ns/1ps;\n  reg clk_i = 1'b0;\n  always #(PERIOD/2.0) clk_i = ~clk_i & (power & ~gate);\n  assign clk = clk_i;\nendmodule\n"
  },
  {
    "class": "firrtl.transforms.BlackBoxInlineAnno",
    "target": "TestHarness.ClockSourceAtFreqMHz_2",
    "name": "ClockSourceAtFreqMHz.v",
    "text": "\nmodule ClockSourceAtFreqMHz #(parameter PERIOD=\"\") (\n    input power,\n    input gate,\n    output clk);\n  timeunit 1ns/1ps;\n  reg clk_i = 1'b0;\n  always #(PERIOD/2.0) clk_i = ~clk_i & (power & ~gate);\n  assign clk = clk_i;\nendmodule\n"
  },
  {
    "class": "firrtl.stage.RunFirrtlTransformAnnotation",
    "transform": "firrtl.transforms.BlackBoxSourceHelper"
  },
  {
    "class": "sifive.enterprise.firrtl.MarkDUTAnnotation",
    "target": "~TestHarness|ChipTop"
  },
  {
    "class": "sifive.enterprise.firrtl.TestHarnessHierarchyAnnotation",
    "filename": "/home/liuht/chipyard/sims/verilator/generated-src/chipyard.harness.TestHarness.RocketConfig/model_module_hierarchy.json"
  },
  {
    "class": "sifive.enterprise.firrtl.ModuleHierarchyAnnotation",
    "filename": "/home/liuht/chipyard/sims/verilator/generated-src/chipyard.harness.TestHarness.RocketConfig/top_module_hierarchy.json"
  }
]
