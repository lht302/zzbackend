// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module shadow(
  input         clock,
                reset,
  input  [1:0]  io_ins_type,	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:101:14]
  input  [63:0] io_addr,	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:101:14]
  output        io_ret_correct	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:101:14]
);

  wire [63:0] _stack_io_dataOut;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:126:21]
  reg  [1:0]  ins_type_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29]
  reg  [1:0]  ins_type_reg_2;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:109:31]
  reg  [63:0] addr_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25]
  reg  [63:0] addr_reg_2;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:114:27]
  reg  [63:0] addr_ret_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:119:29]
  reg         ret_correct_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:120:32]
  wire        pop_wire = io_ins_type == 2'h2;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:155:20]
  always @(posedge clock) begin
    if (reset) begin
      ins_type_reg <= 2'h0;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29]
      ins_type_reg_2 <= 2'h0;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29, :109:31]
      addr_reg <= 64'h0;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25]
      addr_reg_2 <= 64'h0;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25, :114:27]
      addr_ret_reg <= 64'h0;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25, :119:29]
      ret_correct_reg <= 1'h1;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:120:32]
    end
    else begin
      ins_type_reg <= io_ins_type;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29]
      ins_type_reg_2 <= ins_type_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29, :109:31]
      addr_reg <= io_addr;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25]
      addr_reg_2 <= addr_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25, :114:27]
      addr_ret_reg <= _stack_io_dataOut;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:119:29, :126:21]
      if (ins_type_reg_2 == 2'h2)	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:109:31, :155:20, :169:23]
        ret_correct_reg <= addr_reg_2 == addr_ret_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:114:27, :119:29, :120:32, :170:21]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        ins_type_reg = _RANDOM[3'h0][1:0];	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29]
        ins_type_reg_2 = _RANDOM[3'h0][3:2];	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29, :109:31]
        addr_reg = {_RANDOM[3'h0][31:4], _RANDOM[3'h1], _RANDOM[3'h2][3:0]};	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:107:29, :112:25]
        addr_reg_2 = {_RANDOM[3'h2][31:4], _RANDOM[3'h3], _RANDOM[3'h4][3:0]};	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:112:25, :114:27]
        addr_ret_reg = {_RANDOM[3'h4][31:4], _RANDOM[3'h5], _RANDOM[3'h6][3:0]};	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:114:27, :119:29]
        ret_correct_reg = _RANDOM[3'h6][4];	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:119:29, :120:32]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Stack stack (	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:126:21]
    .clock      (clock),
    .reset      (reset),
    .io_push    (~pop_wire & (&io_ins_type)),	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:155:{20,28}, :157:15, :159:{25,33}]
    .io_pop     (pop_wire),	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:155:20]
    .io_dataIn  (io_addr),
    .io_dataOut (_stack_io_dataOut)
  );
  assign io_ret_correct = ret_correct_reg;	// @[generators/rocket-chip/src/main/scala/zzguard_rr/shadow_stack.scala:120:32]
endmodule

